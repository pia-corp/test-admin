# ===================================================
# GitHub Release Workflow
# ===================================================
#
# 概要 (Overview)
# このワークフローは、自動的にリリースタグを生成し、リリースノートを作成するプロセスを管理します。
# This workflow automatically generates release tags and creates release notes.
#
# フロー (Flow)
# 1. 前回のリリースタグを取得
# 2. 新しいリリースタグを生成
# 3. プルリクエストの説明を取得
# 4. 前回リリース以降の変更点を収集
# 5. リリースノートを作成
# 6. 新しいリリースタグでリリースを作成
#
# 注意事項 (Cautions)
# - このワークフローは、特定の命名規則に従ってリリースタグを生成します
# - GitHub TOKEN を使用してAPIと対話します
# - エラーハンドリングが組み込まれています
#
# ===================================================

name: Create Release Tag

on:
  workflow_run:
    workflows: ["01.納品ファイルの取得"]
    types:
      - completed

permissions:
  contents: write

jobs:
  create-release-tag:
    # 前回のワークフローが成功した場合のみ実行
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: 前回のリリースタグを取得する
        id: fetch_previous_tag
        run: |
          echo "pre_tag=$(curl -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)" >> $GITHUB_OUTPUT || { echo "::error:: 前回のリリースタグの取得に失敗しました。"; echo "エラーログ: $(curl -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/releases/latest)"; exit 1; }

      - name: タグを生成する 「{YYYY.MM.DD}-{異なる日のリリース回数}.{当日リリース回数}」
        id: generate_release_tag
        run: |
          today=$(date +'%Y.%m.%d')
          pre_release_date=$(echo ${{ steps.fetch_previous_tag.outputs.pre_tag }} | awk -F'-' '{print $1}')
          pre_release_counts=$(echo ${{ steps.fetch_previous_tag.outputs.pre_tag }} | awk -F'-' '{print $2}')
          pre_release_day_count=$(echo $pre_release_counts | awk -F'.' '{print $1}')
          if [[ $pre_release_date = $today ]]; then
            pre_release_day_count=pre_release_day_count + 1
          }
          pre_release_today_count=$(echo $pre_release_counts | awk -F'.' '{print $2}')
          if [[ ! $pre_release_date = $today ]]; then
            pre_release_today_count=0
          fi
          echo "release_tag=$today-$(($pre_release_day_count)).$(($pre_release_today_count + 1))" >> $GITHUB_OUTPUT

      - name: PRのDescriptionを取得しマークダウン形式に変換する
        id: fetch_pr_description
        run: |
          echo "pr_description=$(curl -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number}}' \
            | jq .body | awk '{if ($0 == "null") print ""; else print}')" >> $GITHUB_OUTPUT || { echo "::error:: PRのDescriptionの取得に失敗しました。"; echo "エラーログ: $(curl -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' 'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number}}')"; exit 1; }

      - name: 前回リリースからの差分をもとに、変更点を取得する
        id: generate_changes
        run: |
          echo "changes=$(
          curl -X POST \
            -H 'Accept: application/vnd.github.v3+json' \
            -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes \
            -d '{
              "tag_name": "${{ steps.generate_release_tag.outputs.release_tag }}",
              "previous_tag_name": "${{ steps.fetch_previous_tag.outputs.pre_tag }}",
              "target_commitish": "main"
            }' | jq .body
          )" >> $GITHUB_OUTPUT || { echo "::error:: 変更点の取得に失敗しました。"; exit 1; }

      - name: リリースノートの本文を作成する
        id: prepare_release_note
        run: |
          echo "release_note_body=$(echo \
            ${{ steps.fetch_pr_description.outputs.pr_description }} \
            ${{ steps.generate_changes.outputs.changes }} \
            | sed 's/\\"//g' | sed 's/["“]//g')" >> $GITHUB_OUTPUT

      - name: タグを切り、リリースノートを作成する
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{ \
              \"tag_name\": \"${{ steps.generate_release_tag.outputs.release_tag }}\", \
              \"target_commitish\": \"main\", \
              \"name\": \"${{ steps.generate_release_tag.outputs.release_tag }}\", \
              \"body\": \"${{ steps.prepare_release_note.outputs.release_note_body }}\" \
            }" \
            -w "%{http_code}" \
            -o response_body.txt \
            https://api.github.com/repos/${{ github.repository }}/releases)
            status_code=$(tail -n1 <<< "$response")
            echo "Status Code: $status_code"
            body=$(cat response_body.txt)
            echo "Response Body: $body"
            if [ $status_code -ne 201 ]; then
              echo "::error:: リリースの作成に失敗しました。"
              exit 1
            fi
