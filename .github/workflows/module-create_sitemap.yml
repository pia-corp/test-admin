name: Create sitemap

on:
  workflow_call:
    inputs:
      repository:
        description: "対象ブランド"
        required: true
        type: string
      repository_no_register:
        description: "任意のブランドリポジトリ"
        required: false
        type: string
      branch_name:
        description: "ブランチのパス"
        required: true
        type: string
    secrets:
      GITHUB_TOKEN_VALUE:
        description: "GitHub Token"
        required: true

permissions:
  contents: write

jobs:
  sitemap:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      REPOSITORY: ${{ inputs.repository_no_register != '' && inputs.repository_no_register || inputs.repository }}

    steps:
      - name: 概要
        run: |
          {
            echo "# 概要"
            echo "指定したリポジトリ（ブランド）のファイルをサーバにアップロードします。"
            echo "| リポジトリ | アップロード先 | ステータス |"
            echo "| -- | -- | -- |"
            echo "| ${{ env.REPOSITORY }} | ${{ env.Timezone }} ${{ env.Months }}月${{ env.MDays }}日${{ env.Hours }}時${{ env.Minutes }}分 | ${{ env.ENABLED }} |"
          } >> $GITHUB_STEP_SUMMARY

      - name: リポジトリをチェックアウト(過去の履歴をすべて取得)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch_name }}

      - name: Gitの設定を行う
        run: |
          git config --global user.name ${{ vars.GIT_USERNAME }}
          git config --global user.email ${{ vars.GIT_MAILADDRESS }}
          git config --global url."https://${{ secrets.GITHUB_TOKEN_VALUE }}@github.com/".insteadOf "https://github.com/"

      - name: sabmodulesを最新の状態に更新
        run: git clone https://github.com/pia-corp/${{env.REPOSITORY}} --recursive || { echo "::error:: サブモジュールの更新に失敗しました。"; echo "エラーログ: $(git clone https://github.com/pia-corp/${{env.REPOSITORY}} --recursive)"; exit 1; }
        env:
          GITHUB_TOKEN_VALUE: ${{ secrets.GITHUB_TOKEN_VALUE }}

      - name: 公開用のフォルダを再生成
        run: |
          # outフォルダを強制削除 (存在しない場合もエラーにならないようにする)
          rm -rf out/${{ env.REPOSITORY }}

          # outフォルダを作成
          mkdir -p out
          mkdir -p out/${{ env.REPOSITORY }}
          if [ -d "./${{ env.REPOSITORY }}/public" ]; then
            cp -R ./${{ env.REPOSITORY }}/public/* out/${{ env.REPOSITORY }}/
          else
            echo "::error:: ./${{ env.REPOSITORY }}/public ディレクトリが存在しません。"
            exit 1
          fi

      - name: サイトマップxmlの生成
        run: |
          if [ ! -d "./${{ env.REPOSITORY }}/public" ]; then
            echo "::error:: ./${{ env.REPOSITORY }}/public ディレクトリが存在しません。"
            exit 1
          fi

          files=$(find ./${{ env.REPOSITORY }}/public -type f -name '*.html')

          echo '<?xml version="1.0" encoding="UTF-8"?>' > out/${{ env.REPOSITORY }}/sitemap.xml
          echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' >> out/${{ env.REPOSITORY }}/sitemap.xml

          for file in $files; do
            relative_path=${file#./${{ env.REPOSITORY }}/public/}
            url="https://${{ env.REPOSITORY }}/$relative_path"
            lastmod=$(date -r "$file" +"%Y-%m-%dT%H:%M:%S.%3NZ" 2>/dev/null || echo "")
            # lastmod=$(stat -c %y "$file" | TZ=Asia/Tokyo git log -1 --format="%ci" -- "$file")

            # Git のコミット日時を取得（JST、小数点以下3桁までの秒）
            lastmod=$(git log -1 --format="%ad" --date=format-local:"%Y-%m-%dT%H:%M:%S.%3NZ" -- "$file" 2>/dev/null || echo "")
            # Git の変更日時を取得（ISO 8601 フォーマットに変換）
            # lastmod=$(git log -1 --format="%ci" -- "$file" 2>/dev/null || echo "")

            if [ -z "$lastmod" ]; then
              lastmod=$(stat -c %y "$file" | sed 's/ /T/')
            fi

            echo "Processing file: $file"
            echo "Last modification time: $lastmod"

            echo '  <url>' >> out/${{ env.REPOSITORY }}/sitemap.xml
            echo "    <loc>$url</loc>" >> out/${{ env.REPOSITORY }}/sitemap.xml
            echo "    <lastmod>$lastmod</lastmod>" >> out/${{ env.REPOSITORY }}/sitemap.xml
            echo '  </url>' >> out/${{ env.REPOSITORY }}/sitemap.xml
          done

          echo '</urlset>' >> out/${{ env.REPOSITORY }}/sitemap.xml

      - name: 指定したブランチをチェックアウト
        run: |
          git checkout ${{ inputs.branch_name }}

      - name: Commit changes HEAD（最新コミット）とステージングエリアの差分があるか確認し、差分があればコミットする
        run: |
          git add .
          if ! git diff-index --quiet HEAD; then
            git commit -m "Automatically create sitemap"
            echo "::notice:: サイトマップの生成"
          else
            echo "::warning:: コミット対象が見つかりませんでした。"
          fi
          git push -u origin ${{ inputs.branch_name }}
