# ===================================================
# 新規Cronジョブ作成ワークフロー (初回実行用)
# ===================================================
#
# 概要:
#   このワークフローは、指定されたリポジトリ名（Cronジョブのタイトルとして使用）に
#   対して、cron-job.org 上に新しいCronジョブを作成します。
#   このCronジョブは、GitHub Actions のリポジトリディスパッチ (repository_dispatch)
#   イベントをトリガーするために設定されます。
#   主に、特定の条件下で別のワークフローを定期実行させたい場合に、そのトリガーとなる
#   Cronジョブを初期セットアップする目的で使用します。
#
# フロー:
#   1. ワークフローの手動トリガー (workflow_dispatch) により実行開始。
#      - 実行時に「登録するリポジトリ名 (Cronジョブタイトル)」を入力。
#   2. `create_new_cron_job` ジョブが Ubuntu 環境で実行される。
#   3. **入力検証:** 入力されたリポジトリ名が空でないか検証。
#   4. **重複確認:** cron-job.org API を使用して、同じタイトルの既存ジョブがないか確認。
#      - 重複がある場合はエラー終了。
#   5. **ペイロード生成:** `jq` を使用して、cron-job.org API (PUT /jobs) に送信する
#      JSONペイロード（ジョブ設定）を動的に生成。
#      - GitHub API のリポジトリディスパッチエンドポイントをURLとして設定。
#      - GitHub API 認証用のヘッダー情報 (PAT) を設定。
#      - ディスパッチイベントのペイロード (event_type, client_payload) を設定。
#      - **注意:** 作成されるジョブはデフォルトで「無効 (enabled: false)」状態。
#   6. **ジョブ作成:** cron-job.org API に PUT リクエストを送信し、新規ジョブを作成。
#      - APIリクエスト失敗時、またはAPIがエラーを返した場合はエラー終了。
#      - 成功した場合、レスポンスから作成されたジョブIDを取得。
#   7. **作成確認:** cron-job.org API (GET /jobs) を再度呼び出し、取得したジョブID
#      を持つジョブが実際に存在するか確認。
#   8. **結果報告:** ワークフローのサマリーに処理結果（成功または失敗）と、
#      作成されたジョブに関する情報（有効化が必要な旨など）を出力。
#
# 注意事項:
#   - **初回実行限定:** このワークフローは、特定のタイトルに対するCronジョブを
#     **新規に作成** するためのものです。同じタイトルで複数回実行すると、
#     重複確認ステップでエラーになります。既存ジョブの変更はできません。
#   - **Secrets 設定:**
#     - `CRON_JOB_TOKEN`: cron-job.org の API トークン。
#     - `GIT_PERSONAL_ACCESS_TOKEN`: GitHub の Personal Access Token (PAT)。
#       `repo` スコープと `workflow` スコープの権限が必要です。
#       (リポジトリディスパッチ送信およびActionsトリガーのため)
#     これらをリポジトリの Secrets に設定してください。
#   - **ターゲットリポジトリ:** Cronジョブがディスパッチイベントを送信する先の
#     GitHubリポジトリは、現在 `env.DISPATCH_TARGET_REPOSITORY` で指定されています。
#     必要に応じてこの値を変更してください。
#     このリポジトリは `pia-corp` オーガニゼーション内に存在する必要があります。
#   - **デフォルト無効:** 作成されるCronジョブは **無効状態** です。
#     ワークフロー実行後、cron-job.org の管理画面で手動で有効化および
#     スケジュール設定を行う必要があります。
#
# ===================================================

name: 05. 新規Cronジョブ作成 (初回のみ実行)

on:
  workflow_dispatch:
    inputs:
      repository_name:
        description: "登録するCronジョブのタイトル (サービスドメインと同一にする)"
        required: true
        type: string

permissions:
  contents: read

jobs:
  create_new_cron_job:
    runs-on: ubuntu-latest
    timeout-minutes: 2 # API呼び出しや待機を含むため少し余裕を持たせる
    env:
      # Cronジョブがリポジトリディスパッチを送るターゲットリポジトリ名
      # このリポジトリにディスパッチを受け取るワークフローが存在する必要がある
      DISPATCH_TARGET_REPOSITORY: "test-admin"
      # APIエンドポイント
      CRON_JOB_API_URL: "https://api.cron-job.org/jobs"
      GITHUB_API_BASE_URL: "https://api.github.com"
      # GitHub Organization Name
      ORG_NAME: "pia-corp"

    steps:
      # =============================
      # ステップ1: 入力検証と環境変数への設定
      # =============================
      # ステップ名を変更
      - name: Validate input and set job title
        id: prepare_job_data # IDも変更
        run: |
          set -e # エラー発生時に即終了 (run ブロックごとに記述推奨)
          echo "INFO: Validating input parameters..."
          # Inputsからリポジトリ名を取得
          cron_title="${{ inputs.repository_name }}"

          # 入力が空でないか確認
          if [ -z "$cron_title" ]; then
            echo "::error::'登録するCronジョブのタイトル' が未入力です。入力してから再試行してください。"
            exit 1
          fi

          # 後続ステップで使えるように環境変数ファイルに出力
          echo "CRON_JOB_TITLE=${cron_title}" >> $GITHUB_ENV
          echo "✓ Cronジョブタイトルを '${cron_title}' に設定しました。"

      # =============================
      # ステップ2: 既存Cronジョブの重複確認
      # =============================
      # ステップ名を変更
      - name: Check for existing cron job with the same title
        id: check_existing_job
        env:
          CRON_JOB_TOKEN: ${{ secrets.CRON_JOB_TOKEN }}
          # GITHUB_ENV から CRON_JOB_TITLE を読み込む
          CRON_JOB_TITLE: ${{ env.CRON_JOB_TITLE }}
        run: |
          set -eo pipefail # パイプ失敗もエラーとする
          echo "INFO: Checking for existing cron jobs with title '${CRON_JOB_TITLE}'..."

          # Cron-job.org APIから現在のジョブ一覧を取得
          get_jobs_response=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ env.CRON_JOB_TOKEN }}" \
            "${{ env.CRON_JOB_API_URL }}") || {
              echo "::error::cron-job.org API への接続に失敗しました (GET /jobs)。"
              # エラー詳細取得はここでは冗長になる可能性があるので省略（必要なら追加）
              exit 1
            }

          # APIレスポンス自体のエラーを確認
          api_error=$(echo "$get_jobs_response" | jq -r '.error')
          if [ "$api_error" != "null" ]; then
            echo "::error::cron-job.org APIエラー (GET /jobs): ${api_error}"
            echo "::error::レスポンス: ${get_jobs_response}"
            exit 1
          fi

          # 同じタイトルのジョブが存在するかjqコマンドで確認 (完全一致で比較)
          # タイトルが一致するジョブの jobI dを取得
          existing_job_id=$(echo "$get_jobs_response" | jq -r --arg title "${CRON_JOB_TITLE}" '.jobs[] | select(.title == $title) | .jobId')

          # 重複がある場合はエラーメッセージを表示して処理を終了
          if [ -n "$existing_job_id" ]; then
            echo "::error::タイトル '${CRON_JOB_TITLE}' のCronジョブ (ID: ${existing_job_id}) は既に存在します。別の名前を指定するか、既存のジョブを削除してください。"
            exit 1
          fi

          echo "✓ タイトル '${CRON_JOB_TITLE}' のCronジョブは存在しないことを確認しました。"

      # =============================
      # ステップ3: 新規Cronジョブの作成
      # =============================
      # ステップ名を変更
      - name: Create new cron job via API
        id: create_cron_job
        env:
          CRON_JOB_TOKEN: ${{ secrets.CRON_JOB_TOKEN }}
          GITHUB_PAT: ${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }} # Secret名を明確に
          # GITHUB_ENV から CRON_JOB_TITLE を読み込む
          CRON_JOB_TITLE: ${{ env.CRON_JOB_TITLE }}
          # Job Env から読み込む
          DISPATCH_TARGET_REPOSITORY: ${{ env.DISPATCH_TARGET_REPOSITORY }}
          GITHUB_API_BASE_URL: ${{ env.GITHUB_API_BASE_URL }}
          ORG_NAME: ${{ env.ORG_NAME }}
          CRON_JOB_API_URL: ${{ env.CRON_JOB_API_URL }}
        run: |
          set -eo pipefail
          echo "INFO: Preparing JSON payload for new cron job..."

          job_config='{
            "job": {
              "url": "${{ env.GITHUB_API_BASE_URL }}/repos/${{ env.ORG_NAME }}/${{ env.DISPATCH_TARGET_REPOSITORY }}/dispatches",
              "enabled": false,
              "saveResponses": false,
              "title": "${{ env.CRON_JOB_TITLE }}",
              "schedule": {
                "expiresAt": 0,
                "timezone": "Asia/Tokyo",
                "hours": [-1],
                "mdays": [-1],
                "minutes": [-1],
                "months": [-1],
                "wdays": [-1]
              },
              "extendedData": {
                "headers": {
                  "Accept": "application/vnd.github+json",
                  "Authorization": "Bearer ${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}",
                  "X-GitHub-Api-Version": "2022-11-28"
                },
                "body": "{\"event_type\": \"upload\", \"client_payload\": {\"repository\": \"${{ env.CRON_JOB_TITLE }}\", \"repository_custom\": \"${{ env.CRON_JOB_TITLE }}\", \"target\": \"検証環境\", \"sync\": \"full\"}}"
              },
              "requestMethod": 1
            }
          }'

          # 変数展開を行うために一旦envsubコマンドを通す
          job_config_expanded=$(echo "$job_config" | envsubst)

          # Cron-job.orgのAPIを使用して新規ジョブを作成
          creation_response=$(curl -s -X PUT \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ env.CRON_JOB_TOKEN }}" \
            -d "$job_config_expanded" \
            ${{ env.CRON_JOB_API_URL }}) || {
              echo "::error:: Cronジョブの作成に失敗しました。"
              echo "エラー詳細: $creation_response"
              exit 1
            }

          # デバッグ用にペイロードを表示（本番ではコメントアウト推奨）
          # echo "DEBUG: Generated Payload:"
          # echo "$cron_job_payload" | jq . # jqで見やすく整形して表示

          echo "INFO: Sending PUT request to create cron job..."

          # Cron-job.org APIを使用して新規ジョブを作成 (PUT /jobs)
          curl -s -X PUT \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ env.CRON_JOB_TOKEN }}" \
            -d "$cron_job_payload" \
            "${{ env.CRON_JOB_API_URL }}"

      # =============================
      # ステップ4: ジョブ作成の成功確認と結果報告
      # =============================
      # ステップ名を変更
      - name: Verify cron job creation and report result
        id: verify_job_creation
        env:
          CRON_JOB_TOKEN: ${{ secrets.CRON_JOB_TOKEN }}
          # GITHUB_ENV から CRON_JOB_TITLE を読み込む
          CRON_JOB_TITLE: ${{ env.CRON_JOB_TITLE }}
          # 前のステップの outputs から作成されたジョブIDを取得
          CREATED_JOB_ID: ${{ steps.create_cron_job.outputs.created_job_id }}
          CRON_JOB_API_URL: ${{ env.CRON_JOB_API_URL }}
        run: |
          set -eo pipefail
          echo "INFO: Verifying creation of cron job ..."

          # 少し待機してAPIの反映を待つ（APIによっては即時反映されない場合があるため）
          echo "INFO: Waiting for 2 seconds for API propagation..."
          sleep 2

          # Cron-job.orgのAPIから現在のジョブ一覧を再取得
          verify_jobs_response=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ env.CRON_JOB_TOKEN }}" \
            ${{ env.CRON_JOB_API_URL }}) || {
              echo "::warning::作成確認のためのCronジョブ一覧取得に失敗しました。手動での確認を推奨します。"
              # 検証が失敗してもジョブ作成自体は成功している可能性があるため、警告にとどめる
              # サマリーには検証失敗の旨を出力する
              echo "# 処理結果" >> $GITHUB_STEP_SUMMARY
              echo "⚠️ Cronジョブ '${{ env.CRON_JOB_TITLE }}' (ID: ${{ env.CREATED_JOB_ID }}) の作成には成功した可能性がありますが、" >> $GITHUB_STEP_SUMMARY
              echo "   APIからの最終確認に失敗しました。cron-job.org でジョブが存在するか確認してください。" >> $GITHUB_STEP_SUMMARY
              echo "   (エラー: GET /jobs API 呼び出し失敗)" >> $GITHUB_STEP_SUMMARY
              exit 0 # 警告なのでワークフローは成功扱い
            }

          # 作成したジョブが存在するか確認
          verified_job_title=$(echo "$verify_jobs_response" | jq -r --arg title "${{ env.CRON_JOB_TITLE }}" '.jobs[] | select(.title | contains($title)) | .url')
          echo "$verified_job_title"

          # --- 結果をワークフローのサマリーに出力 ---
          echo "# 処理結果" >> $GITHUB_STEP_SUMMARY
          if [ "$verified_job_title" == "${{ env.CRON_JOB_TITLE }}" ]; then
            echo "✅ Cronジョブ '${{ env.CRON_JOB_TITLE }}' (ID: ${{ env.CREATED_JOB_ID }}) の新規作成が正常に完了し、確認できました。" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**重要:**" >> $GITHUB_STEP_SUMMARY
            echo "作成されたCronジョブは現在 **無効** 状態です。" >> $GITHUB_STEP_SUMMARY
            echo "以下の手順で有効化とスケジュール設定を行ってください:" >> $GITHUB_STEP_SUMMARY
            echo "1. [cron-job.org](https://cron-job.org/) にログインします。" >> $GITHUB_STEP_SUMMARY
            echo "2. 作成されたジョブ '${{ env.CRON_JOB_TITLE }}' を見つけます。" >> $GITHUB_STEP_SUMMARY
            echo "3. ジョブを編集し、「有効」にチェックを入れます。" >> $GITHUB_STEP_SUMMARY
            echo "4. 実行したいスケジュール（時間、日付など）を設定します。" >> $GITHUB_STEP_SUMMARY
            echo "5. 設定を保存します。" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [cron-job.org ダッシュボードへ](https://cron-job.org/en/members/jobs/)" >> $GITHUB_STEP_SUMMARY
          else
            # IDが見つからなかった場合
            echo "❌ Cronジョブ '${CRON_JOB_TITLE}' の作成処理は完了しましたが、API上で最終確認できませんでした。" >> $GITHUB_STEP_SUMMARY
            echo "   (ジョブID ${{ env.CREATED_JOB_ID }} が見つかりませんでした。APIの反映遅延か、作成失敗の可能性があります)" >> $GITHUB_STEP_SUMMARY
            echo "   手動で cron-job.org を確認してください。" >> $GITHUB_STEP_SUMMARY
            # この場合、作成自体は成功している可能性があるため、ワークフローを失敗させるかは要検討
            # ここでは成功扱いとし、ユーザーに確認を促す
          fi
