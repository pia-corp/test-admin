name: CI

on:
  pull_request:
    branches:
      - main
    # types: [opened, edited, reopened, synchronize]

jobs:
  Clone:
    runs-on: ubuntu-latest
  #   env:
  #     RELEASE_BRANCH_NAME: ${{ github.run_id }}

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set Git configuration
  #       run: |
  #         git config --local user.name "github-actions[bot]"
  #         git config --local user.email "github-actions[bot]@users.noreply.github.com"

  #     - name: Create new branch
  #       run: |
  #         git checkout -b release/github_${{ env.RELEASE_BRANCH_NAME }}

  #     - name: Clone
  #       run: |
  #         git clone https://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@github.com/pia-corp/test-admin_submoduleB
  #         git clone https://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@github.com/pia-corp/test-admin_submoduleA

  #     - name: Update submodules
  #       run: git submodule update --init --recursive

  #     # out „Éï„Ç©„É´„ÉÄ„Çí‰ΩúÊàê„Åó„ÄÅpublic „Éï„Ç©„É´„ÉÄÂÜÖ„ÅÆ„Åô„Åπ„Å¶„ÅÆ„Éï„Ç°„Ç§„É´„Çí„Ç≥„Éî„Éº
  #     - name: Copy Files
  #       run: |
  #         mkdir -p out
  #         mkdir -p out/test-admin_submoduleB
  #         cp -R test-admin_submoduleB/* out/test-admin_submoduleB/

  #     # ÁµêÊûúÁ¢∫Ë™ç„ÅÆ„Åü„ÇÅ„ÄÅout„Éï„Ç©„É´„ÉÄ„ÅÆÂÜÖÂÆπ„ÇíË°®Á§∫
  #     - name: Display out folder content
  #       run: |
  #         echo "Contents of out folder:"
  #         ls -la out/test-admin_submoduleB

  #     - name: Commit existing changes
  #       id: commit_status
  #       run: |
  #         git add .
  #         if ! git diff-index --quiet HEAD; then
  #           git commit -m "Commit existing changes for PR"
  #           echo "changed_files=true" >> $GITHUB_OUTPUT
  #         else
  #           echo "No changes to commit"
  #           echo "changed_files=false" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Push new branch
  #       if: steps.commit_status.outputs.changed_files == 'true'
  #       run: |
  #         git push -u origin release/github_${{ env.RELEASE_BRANCH_NAME }}

  #     - name: Create PR
  #       if: steps.commit_status.outputs.changed_files == 'true'
  #       run: |
  #         gh pr create --fill
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  #     - name: Auto-merge PR
  #       if: steps.commit_status.outputs.changed_files == 'true'
  #       run: gh pr merge --auto --merge
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



#   CheckChangesPub:
#     runs-on: ubuntu-latest
#     outputs:
#       public_changed: ${{ env.public_changed }}
#     steps:
#       - uses: actions/checkout@v4.1.6
#         name: checkout "${{ github.base_ref }}"
#         with:
#           fetch-depth: 1
#           ref: ${{ github.base_ref }}

#       - uses: actions/checkout@v4.1.6
#         name: checkout "${{ github.head_ref }}"
#         with:
#           fetch-depth: 1
#           ref: ${{ github.head_ref}}

#       - name: check_diff
#         shell: bash
#         run: |
#           files=$(git diff --name-only origin/${{ github.base_ref }} origin/${{ github.head_ref }} -- public/)
#           if [ -n "$files" ]; then
#             echo "public_changed=true" >> $GITHUB_ENV
#           else
#             echo "public_changed=false" >> $GITHUB_ENV
#           fi

#   MarkupLinter:
#     name: Markup Linter
#     needs: CheckChangesPub
#     if: github.event.sender.type != 'Bot' && contains(github.head_ref, 'develop') && needs.CheckChangesPub.outputs.public_changed == 'true'
#     runs-on: ubuntu-latest
#     timeout-minutes: 5
#     permissions:
#       contents: read

#     steps:
#       - name: Checkout the repository
#         uses: actions/checkout@v4.1.6
#         with:
#           ref: ${{ github.head_ref || github.ref_name }}

#       - name: Setup Node.js
#         uses: actions/setup-node@v4.0.2
#         with:
#           node-version: "23.2.0"
#           cache: npm

#       - name: Restore npm dependencies
#         id: cache-npm
#         uses: actions/cache@v4.0.2
#         env:
#           cache-name: cache-node-modules
#         with:
#           path: ~/.npm
#           key: ${{ runner.os }}-build-${{ env.cache-name }}-v23.2.0-${{ hashFiles('**/package-lock.json') }}

#       - name: Install npm dependencies (if cache miss)
#         run: npm ci --no-audit --progress=false --silent

#       - name: Lint and rewrite markup
#         run: npm run linter

#   MarkupLinterNoNeed:
#     needs: CheckChangesPub
#     name: Markup Linter(no need)
#     if: github.event.sender.type == 'Bot' || contains(github.head_ref, 'release') || needs.CheckChangesPub.outputs.public_changed == 'false'
#     runs-on: ubuntu-latest
#     timeout-minutes: 1
#     permissions:
#       contents: read

#     steps:
#       - name: Skip Action
#         run: echo "linter skip"

#   CheckImageSize:
#     name: Check Image Size
#     needs: CheckChangesPub
#     if: github.event.sender.type != 'Bot' && contains(github.head_ref, 'develop') && needs.CheckChangesPub.outputs.public_changed == 'true'
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4.1.6

#       - name: Find large images
#         id: file_size_larger_check
#         run: |
#           max_size=${{ vars.MAX_FILE_SIZE }}
#           exists_error=0
#           error_list=""

#           for img in $(find ./public -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.webp" \)); do
#             if [ -f "$img" ]; then
#               size=$(stat -c%s "$img" 2>/dev/null)
#               if [ $? -eq 0 ] && [ $size -gt $max_size ]; then
#                 exists_error=1
#                 error_list="${error_list}\n‚ùå $img (${size} bytes)"
#               fi
#             fi
#           done

#           if [ "$exists_error" = 1 ]; then
#             echo "exists_error=$exists_error" >> $GITHUB_ENV
#             echo "error_message=ÁîªÂÉè„ÅÆ„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åô„Åé„Åæ„Åô:${error_list}" >> $GITHUB_ENV
#           fi

#       - name: Comment on PR with warnings
#         if: ${{ env.exists_error == 1 }}
#         uses: actions/github-script@v7.0.1
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const error_message = `${{ env.error_message }}`;
#             let param = {
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: error_message
#             };
#             await github.rest.issues.createComment(param);

#       - name: Fail workflow if there are errors
#         if: ${{ env.exists_error == 1 }}
#         run: exit 1

#   CheckImageSizeNoNeed:
#     name: Check Image Size(no need)
#     needs: CheckChangesPub
#     if: github.event.sender.type == 'Bot' || contains(github.head_ref, 'release') || needs.CheckChangesPub.outputs.public_changed == 'false'
#     runs-on: ubuntu-latest
#     timeout-minutes: 1
#     permissions:
#       contents: read

#     steps:
#       - name: Skip Action
#         run: echo "check image skip"

#   Lighthouse:
#     name: Lighthouse-CI
#     needs: CheckChangesPub
#     if: github.event.sender.type != 'Bot' && contains(github.head_ref, 'develop') && needs.CheckChangesPub.outputs.public_changed == 'true'
#     runs-on: ubuntu-latest
#     timeout-minutes: 30
#     permissions:
#       contents: read
#       issues: write
#       pull-requests: write

#     steps:
#       - name: Check out repository
#         uses: actions/checkout@v4.1.6
#         with:
#           ref: ${{ github.head_ref || github.ref_name }}

#       - name: Run Lighthouse against a static dist dir
#         id: lighthouse_audit
#         uses: treosh/lighthouse-ci-action@v11
#         with:
#           configPath: './.github/config/.lighthouserc.json'
#           budgetPath: ./.github/config/budget.json
#           temporaryPublicStorage: true
#         continue-on-error: true

#       - name: Comment on PR with Lighthouse results
#         id: format_lighthouse_score
#         uses: actions/github-script@v7.0.1
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const urls = ${{ steps.lighthouse_audit.outputs.links }};
#             const assertions =${{ steps.lighthouse_audit.outputs.assertionResults }};
#             const manifest = ${{ steps.lighthouse_audit.outputs.manifest }};
#             const formatResult = (res) => Math.round(res * 100);
#             const fileName = (url) => url.replace(/^http:\/\/localhost:\d+\//, "");
#             const score = (res) => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥';
#             let existsError = 0;
#             let viewAssertion = "";
#             let scoreArray = {};

#             const getAssertionScore = (value) => {
#               let returnArray = {};
#               if (value.auditId === "interactive") {
#                 if (!value.passed) {
#                   const tti = Math.round(value.actual) / 1000;
#                   returnArray.tti_score = `‚ùå${tti}s`;
#                 }
#               }
#               if (value.auditId === "first-meaningful-paint") {
#                 if (!value.passed) {
#                   const fmp = Math.round(value.actual) / 1000;
#                   returnArray.fmp_score = `‚ùå${fmp}s`;
#                 }
#               }
#               if (value.auditId === "resource-summary") {
#                 if (!value.passed) {
#                   if (value.auditProperty === "image.size") {
#                     const img = Math.round(value.actual / 1024);
#                     returnArray.img_score = `‚ùå${img}KB`;
#                   }
#                 }
#                 if (!value.passed) {
#                   if (value.auditProperty === "script.size") {
#                     const js = Math.round(value.actual / 1024);
#                     returnArray.js_score = `‚ùå${js}KB`;
#                   }
#                 }
#                 if (!value.passed) {
#                   if (value.auditProperty === "total.size") {
#                     const total = Math.round(value.actual / 1024);
#                     returnArray.total_score = `‚ùå${total}KB`;
#                   }
#                 }
#               }
#               return returnArray;
#             };

#             const assertionBody = (value) => {
#               const scores = getAssertionScore(value);
#               const filename = fileName(value.url);
#               if (typeof scoreArray[filename] === "undefined") {
#                 scoreArray[filename] = {
#                   "tti_score": "‚úÖ",
#                   "fmp_score": "‚úÖ",
#                   "img_score": "‚úÖ",
#                   "js_score": "‚úÖ",
#                   "total_score": "‚úÖ",
#                 };
#               }
#               const object = {
#                 url: filename
#               };

#               scoreArray[filename] = { ...scoreArray[filename], ...object };
#               scoreArray[filename] = { ...scoreArray[filename], ...scores };
#             };
#             Object.values(assertions).forEach(assertionBody);

#             const assertionView = (value) => {
#               if (typeof value.url != "undefined") {
#                 viewAssertion += `| ${value.url} | ${value.tti_score} | ${value.fmp_score} | ${value.img_score} | ${value.js_score} | ${value.total_score} |\n`;
#               }
#             };
#             Object.values(scoreArray).forEach(assertionView);

#             let viewText = "";
#             const tableBody = (urlArray) => {
#               if (urlArray.isRepresentativeRun) {
#                 const accessibility = formatResult(urlArray.summary.accessibility);
#                 const practices = formatResult(urlArray.summary["best-practices"]);
#                 const performance = formatResult(urlArray.summary.performance);
#                 const seo = formatResult(urlArray.summary.seo);
#                 viewText += `| [${fileName(urlArray.url)}](${urls[urlArray.url]}) | ${score(performance)} ${performance} | ${score(accessibility)} ${accessibility} | ${score(practices)} ${practices} | ${score(seo)} ${seo} |\n`;
#                 if ( 50 < score(performance) || 50 < score(performance) || 50 < score(accessibility) || 50 < score(practices) ) {
#                   existsError = 1;
#                 }
#               }
#             };
#             Object.values(manifest).forEach(tableBody);

#             const commentBody = `
#             ‚ö°Ô∏è **Lighthouse Mobile Report**:

#             | File name | Performance | Accessibility | Best practices | SEO |
#             | --- | --- | --- | --- | --- |
#             ${viewText}

#             | File name | TTI | FMP | IMG | JS | TOTAL |
#             | --- | --- | --- | --- | --- | --- |
#             ${viewAssertion}

#             TTI: „Éö„Éº„Ç∏„ÅåÂÆåÂÖ®„Å´„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Å´„Å™„Çã„Åæ„Åß„Å´„Åã„Åã„ÇãÊôÇÈñì„ÄÇ
#             FMP: ‰∏ªË¶Å„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅåË°®Á§∫„Åï„Çå„Çã„Åæ„Åß„ÅÆÊôÇÈñì„ÄÇ
#             IMG: „Éö„Éº„Ç∏„ÅßË™≠„ÅøËæº„Åæ„Çå„ÇãÁîªÂÉè„ÅÆ„Éï„Ç°„Ç§„É´ÂÆπÈáè„ÄÇ
#             JS: „Éö„Éº„Ç∏„ÅßË™≠„ÅøËæº„Åæ„Çå„Çãjavascript„ÅÆ„Éï„Ç°„Ç§„É´ÂÆπÈáè„ÄÇ
#             TOTAL: „Éö„Éº„Ç∏„ÅßË™≠„ÅøËæº„Åæ„Çå„Çã„Éï„Ç°„Ç§„É´ÂÆπÈáè„ÅÆÂêàË®à„ÄÇ

#             ‚ÄªË°®Á§∫„Åï„Çå„Å¶„ÅÑ„ÇãÁµêÊûú„ÅØË§áÊï∞Âõû„ÅÆÁµêÊûú„Åã„ÇâÂæó„Çâ„Çå„Åü‰∏≠Â§ÆÂÄ§„Åß„Åô„ÄÇ
#             ‚Äª„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁµêÊûú„ÅØ„Éñ„É¨„Åå„ÅÇ„Çä„Åæ„Åô„É™„É≥„ÇØÂÖà„ÅÆË®∫Êñ≠ÁµêÊûú„ÇíË¶ã„Å¶Âà§Êñ≠„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
#             `;

#             core.setOutput("exists_error", existsError);
#             await github.rest.issues.createComment({
#               issue_number: context.payload.pull_request.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: commentBody
#             });

#       - name: Fail workflow if there are errors
#         if: ${{ steps.format_lighthouse_score.outputs.exists_error == '1' }}
#         run: exit 1

#   LighthouseNoNeed:
#     name: Lighthouse-CI(no need)
#     needs: CheckChangesPub
#     if: github.event.sender.type == 'Bot' || contains(github.head_ref, 'release') || needs.CheckChangesPub.outputs.public_changed == 'false'
#     runs-on: ubuntu-latest
#     timeout-minutes: 1
#     permissions:
#       contents: read

#     steps:
#       - name: Skip Action
#         run: echo "Lighthouse skip"
