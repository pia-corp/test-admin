name: 00.納品ファイルの取得と公開予約
# ブランドリポジトリ取得+サイトマップ生成
# cron-jobを作成してIDをどうやって管理するか

on:
  workflow_dispatch:
    inputs:
      repository:
        type: choice
        description: "対象ブランド"
        required: true
        options:
          - "topards.jp"
          - "feliamo.jp"
          - "molak.jp"
          - "ns-collection.jp"
          - "lilmoon.jp"
          - "minette-lens.jp"
          - "mirage-c.jp"
          - "mimuco.jp"
          - "harne.jp"
          - "louer.jp"
          - "lumieu.jp"
          - "puuuuchu.jp"
          - "melady.jp"
          - "melloew.jp"
          - "faloom.jp"
          - "mimicharme.jp"
          - "lensbe.jp"
          - "clainel.jp"
          - "chapun.jp"
          - "resay.jp"
          - "michou.jp"
      repository_no_register:
        description: "未登録のブランドリポジトリ"
        default: ""
      reservation:
        type: boolean
        description: 予約設定
        default: false
      month:
        type: choice
        required: false
        description: 月
        options:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
      day:
        type: choice
        required: false
        description: 日
        options:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
          - 20
          - 21
          - 22
          - 23
          - 24
          - 25
          - 26
          - 27
          - 28
          - 29
          - 30
          - 31
      hour:
        type: choice
        required: false
        description: 時間
        options:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
          - 20
          - 21
          - 22
          - 23
      minutes:
        type: choice
        required: false
        description: 分
        options:
          - 00
          - 05
          - 10
          - 15
          - 20
          - 25
          - 30
          - 35
          - 40
          - 45
          - 50
          - 55

permissions:
  contents: write
  pull-requests: write

jobs:
  # このジョブは、ワークフローを実行するユーザーが許可されたリストに含まれているかどうかを確認します。
  # 許可されていない場合、ワークフローは警告を出して終了します。
  # 許可されている場合、ワークフローは続行されます。
  Auth:
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - name: Check if the user is authorized
        env:
          USER_LOGIN: ${{ github.actor }}
          CODE_OWNERS: ${{ vars.CODE_OWNERS }}
        run: |
          echo "$USER_LOGIN が許可されたリストに含まれているか確認しています..."
          if ! echo "$CODE_OWNERS" | grep -q -w "$USER_LOGIN"; then
            echo "ユーザー $USER_LOGIN はこのワークフローを実行する権限がありません。"
            echo "::warning:: ユーザー $USER_LOGIN はこのワークフローを実行する権限がありません。"
            exit 1
          fi
          echo "ユーザー $USER_LOGIN は認証されました。続行します..."

  # このジョブは、新しいリリースブランチを作成し、リモートリポジトリにプッシュするためのものです。
  # 'Auth' ジョブが完了した後に実行されます。
  # ジョブの出力として、作成されたリリースブランチの名前を提供します。
  CreateBranch:
    needs: Auth
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      RELEASE_BRANCH_NAME: ${{ steps.set_branch_name.outputs.RELEASE_BRANCH_NAME }}

    steps:
      - uses: actions/checkout@v4
      - name: Create new branch
        id: set_branch_name
        run: |
          BRANCH_NAME=release/github_${{ github.run_id }}
          echo "RELEASE_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "RELEASE_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git checkout -b $BRANCH_NAME
      - name: Push new branch
        run: |
          git push -u origin ${{ env.RELEASE_BRANCH_NAME }}

  UpdateSubmodules:
    needs: CreateBranch
    uses: ./.github/workflows/update_submodules.yml
    with:
      repository: ${{ inputs.repository }}
      repository_no_register: ${{ inputs.repository_no_register }}
      branch_name: release/github_${{ github.run_id }}
    secrets:
      GITHUB_TOKEN_VALUE: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # このジョブは、未コミットの変更や新しいコミットが存在するかを確認するためのものです。
  # `UpdateSubmodules`ジョブが完了した後に実行されます。
  ExistsCommit:
    needs: UpdateSubmodules
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      commit_exists: ${{ steps.commit_check.outputs.commit_exists }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get last commit message
        id: get_commit_message
        run: |
          # 直前のコミットメッセージを取得
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Last commit message: $COMMIT_MESSAGE"

          # 出力に使用するための適切な形式でコミットメッセージを設定
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_ENV
          echo "commit_message=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
        shell: /usr/bin/bash -e {0}

  CreateSiteMap:
    needs: ExistsCommit
    if: ${{ needs.ExistsCommit.outputs.get_commit_message == 'Automatically update submodules' }}
    uses: ./.github/workflows/create_sitemap.yml
    with:
      repository: ${{ inputs.repository }}
      repository_no_register: ${{ inputs.repository_no_register }}
      branch_name: release/github_${{ github.run_id }}
    secrets:
      GITHUB_TOKEN_VALUE: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # このジョブは、指定されたブランチが存在しない場合にそのブランチをリモートリポジトリから削除するためのものです。
  # 具体的には、ExistsCommitジョブの出力がfalseの場合に、CreateBranchジョブで作成されたブランチを削除します。
  DeleteBranch:
    needs: ExistsCommit
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Delete branch
        if: ${{ needs.ExistsCommit.outputs.get_commit_message != 'Automatically update submodules' }}
        run: git push origin --delete ${{ needs.CreateBranch.outputs.RELEASE_BRANCH_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # このジョブは、リポジトリをチェックアウトし、指定されたブランチに切り替え、
  # コミットが存在する場合にプルリクエストを作成します。
  CloseBranch:
    needs: CreateSiteMap
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: release/github_${{ github.run_id }}

      - name: Create PR if commit exists
        run: |
          gh pr create --fill
          PR_NUMBER=$(gh pr list --state open --head develop --base main --json number --jq '.[].number')
          if [ -n "$PR_NUMBER" ]; then
            gh pr merge $PR_NUMBER --merge --auto
          else
            echo "::error:: Mergeするプルリクエストが見つかりません。"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  UploadReservation:
    needs: [CreateSiteMap, DeleteBranch]
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
