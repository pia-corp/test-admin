name: 01.納品ファイルの取得

on:
  workflow_dispatch:
    inputs:
      repository:
        type: choice
        description: "対象ブランド"
        required: true
        options:
          - "topards.jp"
          - "feliamo.jp"
          - "molak.jp"
          - "ns-collection.jp"
          - "lilmoon.jp"
          - "minette-lens.jp"
          - "mirage-c.jp"
          - "mimuco.jp"
          - "harne.jp"
          - "louer.jp"
          - "lumieu.jp"
          - "puuuuchu.jp"
          - "melady.jp"
          - "melloew.jp"
          - "faloom.jp"
          - "mimicharme.jp"
          - "lensbe.jp"
          - "clainel.jp"
          - "chapun.jp"
          - "resay.jp"
          - "michou.jp"
      repository_no_register:
        description: "任意のブランドリポジトリ"
        default: ""

permissions:
  contents: write
  pull-requests: write

jobs:
  CreateBranch:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      REPOSITORY: ${{ inputs.repository_no_register != '' && inputs.repository_no_register || inputs.repository }}

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4.2.1

      - name: リリース用の新しいブランチを作成
        run: |
          git checkout -b release/github_${{ github.run_id }}
        continue-on-error: false

      - name: 新しいブランチをプッシュ
        run: |
          git push -u origin release/github_${{ github.run_id }}
        continue-on-error: false

  UpdateSubmodules:
    needs: [CreateBranch]
    uses: ./.github/workflows/module-update_submodules.yml
    with:
      repository: ${{ inputs.repository }}
      repository_no_register: ${{ inputs.repository_no_register }}
      branch_name: release/github_${{ github.run_id }}
    secrets:
      GITHUB_TOKEN_VALUE: ${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}

  GetCommitMessage:
    needs: [UpdateSubmodules]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      COMMIT_MESSAGE: ${{ steps.get_commit_message.outputs.COMMIT_MESSAGE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.1
        with:
          ref: release/github_${{ github.run_id }}

      - name: Get commit message
        id: get_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%s | xargs)
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGE"

  CreateSiteMap:
    needs: [GetCommitMessage]
    if: ${{ needs.GetCommitMessage.outputs.COMMIT_MESSAGE && (needs.GetCommitMessage.outputs.COMMIT_MESSAGE == 'Automatically update submodules' || needs.GetCommitMessage.outputs.COMMIT_MESSAGE == 'Automatically add submodules') }}

    uses: ./.github/workflows/module-create_sitemap.yml
    with:
      repository: ${{ inputs.repository }}
      repository_no_register: ${{ inputs.repository_no_register }}
      branch_name: release/github_${{ github.run_id }}
    secrets:
      GITHUB_TOKEN_VALUE: ${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}

  DeleteBranch:
    needs: [GetCommitMessage]
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: ${{ needs.GetCommitMessage.outputs.COMMIT_MESSAGE && needs.GetCommitMessage.outputs.COMMIT_MESSAGE != 'Automatically update submodules' && needs.GetCommitMessage.outputs.COMMIT_MESSAGE != 'Automatically add submodules' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Delete branch
        run: |
          git push origin --delete release/github_${{ github.run_id }}
          echo "::notice:: ブランチを削除しました。release/github_${{ github.run_id }}"
          echo "エラーログ: $(curl -s -X GET -H "Authorization: Bearer $CRON_JOB_TOKEN" https://api.cron-job.org/jobs)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  CloseBranch:
    needs: CreateSiteMap
    runs-on: ubuntu-latest
    timeout-minutes: 3
    env:
      REPOSITORY: ${{ inputs.repository_no_register != '' && inputs.repository_no_register || inputs.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: release/github_${{ github.run_id }}
          fetch-depth: 0

      - name: check PR
        id: check_pr
        run: |
          echo "count=$(gh pr list -B release/github_${{ github.run_id }} -H ${{ github.ref_name }} --json 'id' -q '.[] | length')" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR
        if: ${{ steps.check_pr.outputs.count == '' }}
        run: |
          gh pr create --fill
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}

      - name: Merge Pull Request
        run: |
          gh pr merge --merge
          gh pr list
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
