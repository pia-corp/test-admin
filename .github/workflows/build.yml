name: ブランドリポジトリ取得+サイトマップ生成
# cron-jobを作成してIDをどうやって管理するか

on:
  workflow_dispatch:
    inputs:
      repository:
        type: choice
        description: "対象ブランド"
        required: true
        options:
          - "topards.jp"
          - "feliamo.jp"
          - "molak.jp"
          - "ns-collection.jp"
          - "lilmoon.jp"
          - "minette-lens.jp"
          - "mirage-c.jp"
          - "mimuco.jp"
          - "harne.jp"
          - "louer.jp"
          - "lumieu.jp"
          - "puuuuchu.jp"
          - "melady.jp"
          - "melloew.jp"
          - "faloom.jp"
          - "mimicharme.jp"
          - "lensbe.jp"
          - "clainel.jp"
          - "chapun.jp"
          - "resay.jp"
          - "michou.jp"
      repository_no_register:
        description: "未登録のブランドリポジトリ"
        default: ""

permissions:
  contents: write
  pull-requests: write

env:
  RELEASE_BRANCH_NAME: release/github_${{ github.run_id }}

jobs:
  Auth:
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - name: Check if the user is authorized
        env:
          USER_LOGIN: ${{ github.actor }}
          CODE_OWNERS: ${{ vars.CODE_OWNERS }}
        run: |
          echo "$USER_LOGIN が許可されたリストに含まれているか確認しています..."
          if ! echo "$CODE_OWNERS" | grep -q -w "$USER_LOGIN"; then
            echo "ユーザー $USER_LOGIN はこのワークフローを実行する権限がありません。"
            exit 1
          fi
          echo "ユーザー $USER_LOGIN は認証されました。続行します..."

  CreateBranch:
    needs: Auth
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      RELEASE_BRANCH_NAME: ${{ steps.set_branch_name.outputs.RELEASE_BRANCH_NAME }}

    steps:
      - uses: actions/checkout@v4
      - name: Create new branch
        id: set_branch_name
        run: |
          BRANCH_NAME=release/github_${{ github.run_id }}
          echo "RELEASE_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "RELEASE_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git checkout -b $BRANCH_NAME
      - name: Push new branch
        run: |
          git push -u origin ${{ env.RELEASE_BRANCH_NAME }}

  UpdateSubmodules:
    needs: CreateBranch
    uses: ./.github/workflows/update_submodules.yml
    with:
      repository: ${{ inputs.repository }}
      repository_no_register: ${{ inputs.repository_no_register }}
      branch_name: release/github_${{ github.run_id }}
    secrets:
      GITHUB_TOKEN_VALUE: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  ExistsCommit:
    needs: UpdateSubmodules
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      commit_exists: ${{ steps.commit_check.outputs.commit_exists }}

    steps:
      - name: Check for uncommitted changes
        id: commit_check
        run: |
          echo "未コミットの変更や新しいコミットがあるか確認しています..."
          if git diff-index --quiet HEAD; then
            echo "No new commits or changes."
            echo "commit_exists=false" >> $GITHUB_OUTPUT
          else
            echo "Commits or changes exist."
            echo "commit_exists=true" >> $GITHUB_OUTPUT
          fi

  ExistsCommit:
    needs: UpdateSubmodules
    runs-on: ubuntu-latest

    steps:
      - name: Debug Outputs
        run: |
          echo "Commit Exists Output: ${{ steps.commit_check.outputs.commit_exists }}"
          echo "Commit Exists Output: ${{ needs.ExistsCommit.outputs.commit_exists }}"

  CreateSiteMap:
    needs: ExistsCommit
    if: ${{ needs.ExistsCommit.outputs.commit_exists }} == 'true'
    uses: ./.github/workflows/create_sitemap.yml
    with:
      repository: ${{ inputs.repository }}
      repository_no_register: ${{ inputs.repository_no_register }}
      branch_name: release/github_${{ github.run_id }}
    secrets:
      GITHUB_TOKEN_VALUE: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  DeleteBranch:
    needs: ExistsCommit
    runs-on: ubuntu-latest
    steps:
      - name: Delete branch
        if: ${{ needs.ExistsCommit.outputs.commit_exists }} == 'false'
        run: git push origin --delete ${{ needs.CreateBranch.outputs.RELEASE_BRANCH_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN_VALUE }}

  CreatePR:
    needs: CreateSiteMap
    runs-on: ubuntu-latest
    steps:
      - name: Create PR
        if: ${{ needs.ExistsCommit.outputs.commit_exists }} == 'true'
        run: gh pr create --fill
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  AutoMerge:
    needs: CreatePR
    runs-on: ubuntu-latest
    steps:
      - name: Auto-merge PR
        run: gh pr merge --auto --merge
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  CreateTag:
    needs: AutoMerge
    uses: ./.github/workflows/create_tag.yml
