name: 01.納品ファイルの取得

on:
  workflow_dispatch:
    inputs:
      repository:
        type: choice
        description: "対象ブランド"
        required: true
        options:
          - "topards.jp"
          - "feliamo.jp"
          - "molak.jp"
          - "ns-collection.jp"
          - "lilmoon.jp"
          - "minette-lens.jp"
          - "mirage-c.jp"
          - "mimuco.jp"
          - "harne.jp"
          - "louer.jp"
          - "lumieu.jp"
          - "puuuuchu.jp"
          - "melady.jp"
          - "melloew.jp"
          - "faloom.jp"
          - "mimicharme.jp"
          - "lensbe.jp"
          - "clainel.jp"
          - "chapun.jp"
          - "resay.jp"
          - "michou.jp"
      repository_no_register:
        description: "任意のブランドリポジトリ"
        default: ""

permissions:
  contents: write
  pull-requests: write

jobs:
  # このジョブは、ワークフローを実行するユーザーが許可されたリストに含まれているかどうかを確認します。
  Auth:
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - name: ユーザーの認証を確認
        env:
          USER_LOGIN: ${{ github.actor }}
          CODE_OWNERS: ${{ vars.GIT_CODE_OWNERS }}
        run: |
          echo "$USER_LOGIN が許可されたリストに含まれているか確認しています..."
          if ! echo "$CODE_OWNERS" | grep -q -w "$USER_LOGIN"; then
            echo "::warning:: ユーザー $USER_LOGIN はこのワークフローを実行する権限がありません。"
            exit 1
          fi
          echo "::notice:: ユーザー $USER_LOGIN は認証されました。続行します..."

          # 予約設定の状態を判定
          if [ "${{ inputs.reservation }}" == "true" ]; then
            res="✅"
          else
            res="❌"
          fi

          # GitHubステップサマリーに情報を追加
          {
            echo "| リポジトリ | 予約設定 | 日時 |"
            echo "| -- | -- | -- |"
            if [ -n "${{ inputs.repository_no_register }}" ]; then
              echo "| ${{ inputs.repository_no_register }} | $res | ${{ inputs.month }}月${{ inputs.day }}日${{ inputs.hour }}時${{ inputs.minutes }}分 |"
            else
              echo "| ${{ inputs.repository }} | $res | ${{ inputs.month }}月${{ inputs.day }}日${{ inputs.hour }}時${{ inputs.minutes }}分 |"
            fi
          } >> $GITHUB_STEP_SUMMARY


  # このジョブは、新しいリリースブランチを作成し、リモートリポジトリにプッシュするためのものです。
  # 'Auth' ジョブが完了した後に実行されます。
  # ジョブの出力として、作成されたリリースブランチの名前を提供します。
  CreateBranch:
    needs: [Auth]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: リリース用の新しいブランチを作成
        run: |
          git checkout -b release/github_${{ github.run_id }}

      - name: 新しいブランチをプッシュ
        run: |
          git push -u origin release/github_${{ github.run_id }}

  UpdateSubmodules:
    needs: [CreateBranch]
    uses: ./.github/workflows/module-update_submodules.yml
    with:
      repository: ${{ inputs.repository }}
      repository_no_register: ${{ inputs.repository_no_register }}
      branch_name: release/github_${{ github.run_id }}
    secrets:
      GITHUB_TOKEN_VALUE: ${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}

  GetCommitMessage:
    needs: [UpdateSubmodules]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      COMMIT_MESSAGE: ${{ steps.get_commit_message.outputs.COMMIT_MESSAGE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.1
        with:
          ref: release/github_${{ github.run_id }}

      - name: Get commit message
        id: get_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%s | xargs)
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "$COMMIT_MESSAGE"

  CreateSiteMap:
    needs: [GetCommitMessage]
    if: ${{ needs.GetCommitMessage.outputs.COMMIT_MESSAGE && (needs.GetCommitMessage.outputs.COMMIT_MESSAGE == 'Automatically update submodules' || needs.GetCommitMessage.outputs.COMMIT_MESSAGE == 'Automatically add submodules') }}

    uses: ./.github/workflows/module-create_sitemap.yml
    with:
      repository: ${{ inputs.repository }}
      repository_no_register: ${{ inputs.repository_no_register }}
      branch_name: release/github_${{ github.run_id }}
    secrets:
      GITHUB_TOKEN_VALUE: ${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}

  # このジョブは、指定されたブランチが存在しない場合にそのブランチをリモートリポジトリから削除するためのものです。
  # 具体的には、UpdateSubmodulesジョブの出力がfalseの場合に、CreateBranchジョブで作成されたブランチを削除します。
  DeleteBranch:
    needs: [GetCommitMessage]
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: ${{ needs.GetCommitMessage.outputs.COMMIT_MESSAGE && needs.GetCommitMessage.outputs.COMMIT_MESSAGE != 'Automatically update submodules' && needs.GetCommitMessage.outputs.COMMIT_MESSAGE != 'Automatically add submodules' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Delete branch
        run: |
          git push origin --delete release/github_${{ github.run_id }}
          echo "::notice:: ブランチを削除しました。release/github_${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # このジョブは、リポジトリをチェックアウトし、指定されたブランチに切り替え、
  # コミットが存在する場合にプルリクエストを作成します。
  CloseBranch:
    needs: CreateSiteMap
    runs-on: ubuntu-latest
    timeout-minutes: 3
    env:
      REPOSITORY: ${{ inputs.repository_no_register != '' && inputs.repository_no_register || inputs.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: release/github_${{ github.run_id }}
          fetch-depth: 0

      - name: check PR
        id: check_pr
        run: |
          echo "count=$(gh pr list -B release/github_${{ github.run_id }} -H ${{ github.ref_name }} --json 'id' -q '.[] | length')" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR
        if: ${{ steps.check_pr.outputs.count == '' }}
        run: |
          gh pr create --fill
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_PERSONAL_ACCESS_TOKEN }}

      - name: Merge Pull Request
        run: |
          gh pr merge --merge
          gh pr list
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
