# ===================================================
# ワークフロー: 公開予約システム
# ===================================================
#
# 【概要】
# このコードは、複数のブランドECサイトに対して、指定した日時に
# 自動的にコンテンツを公開するための予約設定を行うGitHub Actionsワークフローです。
# cron-job.orgのAPIを利用して予約タスクを管理し、
# 指定した日時に「upload」イベントを発火させることで、コンテンツの自動公開を実現します。
#
# 【前提条件】
# - cron-job.orgのAPIトークン (CRON_JOB_TOKEN) が設定されていること
#
# 主なフロー:
# 1. 予約情報の入力
# 2. 既存CronJobの取得
# 3. 予約設定の更新
# 4. 更新結果の確認
#
# 【注意事項】
# - 月末日(29, 30, 31日)を指定する場合は、その月の日数に注意する必要あり予約は5分単位での設定のみ可能
# - 検証環境では「full」同期タイプのみ利用可能、本番環境では「full」または「delta」同期タイプを選択可能
# - 新しいドメインを追加する場合は、選択肢の更新とcron-job.org側での事前登録が必要。
#
# ===================================================

name: 03.公開予約

# トリガー: 手動実行のみ
on:
  workflow_dispatch:
    inputs:
      # ブランド選択用の入力フィールド
      repository:
        type: choice
        description: "対象ブランド（リストから選択）"
        required: true
        options:
          - "topards.jp"
          - "feliamo.jp"
          - "molak.jp"
          - "ns-collection.jp"
          - "lilmoon.jp"
          - "minette-lens.jp"
          - "mirage-c.jp"
          - "mimuco.jp"
          - "harne.jp"
          - "louer.jp"
          - "lumieu.jp"
          - "puuuuchu.jp"
          - "melady.jp"
          - "melloew.jp"
          - "faloom.jp"
          - "mimicharme.jp"
          - "lensbe.jp"
          - "clainel.jp"
          - "chapun.jp"
          - "resay.jp"
          - "michou.jp"

      # リストにないブランド用の自由入力フィールド
      repository_custom:
        description: "リストにないブランド（任意入力）"
        default: ""

      # 公開日時設定フィールド
      month:
        type: choice
        required: true
        description: "予約月"
        options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

      day:
        type: choice
        required: true
        description: "予約日"
        options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]

      hour:
        type: choice
        required: true
        description: "予約時間"
        options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]

      minutes:
        type: choice
        required: true
        description: "予約分"
        options: ["00", "05", "10", "15", "20", "25", "30", "35", "40", "45", "50", "55"]

      # 環境設定フィールド
      target_environment:
        description: "デプロイ環境"
        type: choice
        required: true
        options:
          - "検証環境"
          - "本番環境"

      sync_type:
        description: "同期タイプ（※検証環境はfullアップロードのみ）"
        type: choice
        required: true
        options:
          - "full"  # 完全同期
          - "delta" # 差分同期

# ジョブ定義
jobs:
  schedule_publication:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    env:
      # カスタム入力があればそちらを優先、なければリストから選択されたものを使用
      cron_job_title: ${{ inputs.repository_custom != '' && inputs.repository_custom || inputs.repository }}
      cron_job_api_url: "https://api.cron-job.org/jobs"

    steps:
      # =============================
      # ステップ1: 既存のCronJobリストを取得
      # =============================
      - name: "CronJobリストの取得"
        id: fetch_cron_jobs
        run: |
          echo "::group::CronJobリスト取得"
          response=$(curl -s -X GET \
              -H 'Content-Type: application/json' \
              -H 'Authorization: Bearer ${{ secrets.CRON_JOB_TOKEN }}' \
              ${{ env.cron_job_api_url }}) || {
                echo "::error::CronJobリストの取得に失敗しました"
                exit 1
              }
          echo "レスポンスデータ: $response"
          echo "$response" > cron_jobs.json
          echo "::endgroup::"

      # =============================
      # ステップ2: 対象リポジトリのジョブIDを抽出
      # =============================
      - name: "対象リポジトリのジョブID抽出"
        id: extract_job_id
        run: |
          echo "::group::ジョブID抽出"
          JOB_ID=$(jq -r '.jobs[] | select(.title == "'"${{ env.cron_job_title }}"'") | .jobId' cron_jobs.json) || {
            echo "::error::ジョブIDの抽出に失敗しました: $(cat cron_jobs.json)"
            exit 1
          }

          if [ -z "$JOB_ID" ]; then
            echo "::error::リポジトリ '${{ env.cron_job_title }}' に対応するジョブIDが見つかりませんでした"
            exit 1
          fi

          echo "抽出されたジョブID: $JOB_ID"
          echo "job_id=$JOB_ID" >> $GITHUB_ENV
          echo "::endgroup::"

      # =============================
      # ステップ3: CronJobの予約設定更新
      # =============================
      - name: "CronJob予約設定の更新"
        id: update_cron_job
        env:
          MONTH: ${{ inputs.month }}
          DAY: ${{ inputs.day }}
          HOUR: ${{ inputs.hour }}
          MINUTES: ${{ inputs.minutes }}
        run: |
          echo "::group::CronJob予約設定更新"
          # CronJobの更新リクエスト実行
          update_response=$(curl -s -X PATCH \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ secrets.CRON_JOB_TOKEN }}" \
            -d '{
              \"job\": {
                \"enabled\": true,
                \"schedule\": {
                  \"hours\": ['$hour'],
                  \"mdays\": ['$day'],
                  \"minutes\": ['$minutes'],
                  \"months\": ['$month']
                },
                \"extendedData\": {
                  \"body\": \"{\"event_type\": \"active\", \"inputs\": {\"repository\": \"${{ inputs.repository }}\", \"repository_no_register\": \"${{ inputs.repository_no_register }}\", \"target\": \"${{ inputs.target }}\", \"sync\": \"${{ inputs.sync }}\"}}\"
                }
              }
            }'\
            ${{ env.cron_job_api_url }}/${{ env.job_id }})

          echo "更新レスポンス: $update_response"

          # 更新に失敗した場合のエラーハンドリング
          if [[ $(echo "$update_response" | jq -r '.status') != "success" ]]; then
            echo "::error::CronJob更新に失敗しました: $update_response"
            exit 1
          fi
          echo "::endgroup::"

      # =============================
      # ステップ4: 更新後のCronJob情報を再取得して確認
      # =============================
      - name: "更新後のCronJob情報取得"
        id: fetch_updated_cron_job
        run: |
          echo "::group::更新後のCronJob情報取得"
          updated_response=$(curl -s -X GET \
              -H 'Content-Type: application/json' \
              -H 'Authorization: Bearer ${{ secrets.CRON_JOB_TOKEN }}' \
              CRON_API_ENDPOINT) || {
                echo "::error::更新後のCronJob情報取得に失敗しました"
                exit 1
              }

          echo "$updated_response" > updated_cron_jobs.json
          echo "::endgroup::"

      # =============================
      # ステップ5: 最新のジョブ情報を抽出
      # =============================
      - name: "更新後のジョブ情報抽出"
        id: extract_updated_job_info
        run: |
          echo "::group::更新後のジョブ情報抽出"
          # jq を使って各種設定値を抽出
          JOB_ENABLED=$(jq -r '.jobs[] | select(.title == "'"${{ env.cron_job_title }}"'") | .enabled' updated_cron_jobs.json)
          JOB_HOURS=$(jq -r '.jobs[] | select(.title == "'"${{ env.cron_job_title }}"'") | .schedule.hours | @csv' updated_cron_jobs.json)
          JOB_DAYS=$(jq -r '.jobs[] | select(.title == "'"${{ env.cron_job_title }}"'") | .schedule.mdays | @csv' updated_cron_jobs.json)
          JOB_MINUTES=$(jq -r '.jobs[] | select(.title == "'"${{ env.cron_job_title }}"'") | .schedule.minutes | @csv' updated_cron_jobs.json)
          JOB_MONTHS=$(jq -r '.jobs[] | select(.title == "'"${{ env.cron_job_title }}"'") | .schedule.months | @csv' updated_cron_jobs.json)
          JOB_TIMEZONE=$(jq -r '.jobs[] | select(.title == "'"${{ env.cron_job_title }}"'") | .schedule.timezone' updated_cron_jobs.json)

          # 抽出した値を環境変数に保存
          echo "JOB_ENABLED=$JOB_ENABLED" >> $GITHUB_ENV
          echo "JOB_HOURS=$JOB_HOURS" >> $GITHUB_ENV
          echo "JOB_DAYS=$JOB_DAYS" >> $GITHUB_ENV
          echo "JOB_MINUTES=$JOB_MINUTES" >> $GITHUB_ENV
          echo "JOB_MONTHS=$JOB_MONTHS" >> $GITHUB_ENV
          echo "JOB_TIMEZONE=$JOB_TIMEZONE" >> $GITHUB_ENV
          echo "::endgroup::"

      # =============================
      # ステップ6: 結果のサマリー表示
      # =============================
      - name: "予約設定結果のサマリー表示"
        run: |
          # GitHubステップサマリーに情報を追加
          {
            echo "# EC公開予約設定結果"
            echo ""
            echo "## 予約情報"
            echo "| 項目 | 値 |"
            echo "| ---- | ---- |"
            echo "| 対象リポジトリ | ${{ env.cron_job_title }} |"
            echo "| 予約日時 | ${{ env.JOB_MONTHS }}月 ${{ env.JOB_DAYS }}日 ${{ env.JOB_HOURS }}時 ${{ env.JOB_MINUTES }}分 (${{ env.JOB_TIMEZONE }}) |"
            echo "| デプロイ環境 | ${{ inputs.target_environment }} |"
            echo "| 同期タイプ | ${{ inputs.sync_type }} |"
            echo "| 予約状態 | ${{ env.JOB_ENABLED == 'true' && '有効' || '無効' }} |"
            echo ""
            echo "## 備考"
            echo "* 予約状況を直接確認する場合は [cron-job.org](https://cron-job.org/en/) にアクセスしてください"
            echo "* ジョブID: \`${{ env.job_id }}\`"
          } >> $GITHUB_STEP_SUMMARY
