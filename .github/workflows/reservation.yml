name: 03.公開予約

on:
  workflow_dispatch:
    inputs:
      repository:
        type: choice
        description: "対象ブランド"
        required: true
        options:
          - "topards.jp"
          - "feliamo.jp"
          - "molak.jp"
          - "ns-collection.jp"
          - "lilmoon.jp"
          - "minette-lens.jp"
          - "mirage-c.jp"
          - "mimuco.jp"
          - "harne.jp"
          - "louer.jp"
          - "lumieu.jp"
          - "puuuuchu.jp"
          - "melady.jp"
          - "melloew.jp"
          - "faloom.jp"
          - "mimicharme.jp"
          - "lensbe.jp"
          - "clainel.jp"
          - "chapun.jp"
          - "resay.jp"
          - "michou.jp"
      repository_no_register:
        description: "任意のブランドリポジトリ"
        default: ""
      month:
        type: choice
        required: false
        description: 月
        options:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
      day:
        type: choice
        required: false
        description: 日
        options:
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
          - 20
          - 21
          - 22
          - 23
          - 24
          - 25
          - 26
          - 27
          - 28
          - 29
          - 30
          - 31
      hour:
        type: choice
        required: false
        description: 時間
        options:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          - 9
          - 10
          - 11
          - 12
          - 13
          - 14
          - 15
          - 16
          - 17
          - 18
          - 19
          - 20
          - 21
          - 22
          - 23
      minutes:
        type: choice
        required: false
        description: 分
        options:
          - 00
          - 05
          - 10
          - 15
          - 20
          - 25
          - 30
          - 35
          - 40
          - 45
          - 50
          - 55
      target:
        description: アップロード先
        type: choice
        required: true
        options:
          - "検証環境"
          - "本番環境"
      sync:
        description: "※検証環境はfullアップロードのみ"
        type: choice
        required: true
        options:
          - "full"
          - "delta"
jobs:
  RESERVATION:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    env:
      REPOSITORY: ${{ inputs.repository_no_register != '' && inputs.repository_no_register || inputs.repository }}

    steps:
      - name: CronJobリストを取得
        run: |
          response=$(curl -X GET \
              -H 'Content-Type: application/json' \
              -H 'Authorization: Bearer ${{ secrets.CRON_JOB_TOKEN }}' \
              https://api.cron-job.org/jobs) || { echo 'Failed to fetch CronJob list'; echo "エラーログ: $(curl -X GET -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{ secrets.CRON_JOB_TOKEN }}' https://api.cron-job.org/jobs)"; exit 1; }
          echo "Data from API: $response"
          echo "$response" > data.json

      - name: ジョブIDを抽出
        run: |
          JOB_ID=$(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .jobId' data.json) || { echo 'Failed to extract Job ID'; echo "エラーログ: $(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .jobId' data.json)"; exit 1; }
          echo "Job ID: $JOB_ID"
          echo "job_id=$JOB_ID" >> $GITHUB_ENV

      - name: CronJobの登録
        env:
          month: ${{ inputs.month }}
          day: ${{ inputs.day }}
          hour: ${{ inputs.hour }}
          minutes: ${{ inputs.minutes }}
        run: |
          curl -X PATCH \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer ${{ secrets.CRON_JOB_TOKEN }}" \
            -d '{
              "job": {
                "enabled": true,
                "schedule": {
                  "hours": ['$hour'],
                  "mdays": ['$day'],
                  "minutes": ['$minutes'],
                  "months": ['$month']
                },
                "extendedData": {
                  "body": "{\"event_type\": \"active\", \"inputs\": {\"repository\": \"${{ inputs.repository }}\", \"repository_no_register\": \"${{ inputs.repository_no_register }}\", \"target\": \"${{ inputs.target }}\", \"sync\": \"${{ inputs.sync }}\"}}"
                }
              }
            }' \
            https://api.cron-job.org/jobs/${{ env.job_id }} ||
            {
              echo 'Failed to register CronJob'; echo "エラーログ: $(curl -X PATCH -H 'Content-Type: application/json' -H "Authorization: Bearer ${{ secrets.CRON_JOB_TOKEN }}" -d '{\"job\": {\"enabled\": true, \"schedule\": {\"hours\": [$hour], \"mdays\": [$day], \"minutes\": [$minutes], \"months\": [$month]}}}' https://api.cron-job.org/jobs/${{ env.job_id }})"; exit 1; }
            }


      - name: CronJobリストを取得
        run: |
          response=$(curl -X GET \
              -H 'Content-Type: application/json' \
              -H 'Authorization: Bearer ${{ secrets.CRON_JOB_TOKEN }}' \
              https://api.cron-job.org/jobs) || { echo 'Failed to fetch CronJob list'; echo "エラーログ: $(curl -X GET -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{ secrets.CRON_JOB_TOKEN }}' https://api.cron-job.org/jobs)"; exit 1; }
          echo "Data from API: $response"
          echo "$response" > data.json

      - name: ジョブ情報を抽出
        run: |
          # jq を使って ドメイン のデータを抽出
          Enabled=$(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .enabled' data.json) || { echo 'Failed to extract reservation status'; echo "エラーログ: $(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .enabled' data.json)"; exit 1; }
          Hours=$(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .schedule.hours | @csv' data.json) || { echo 'Failed to extract hours'; echo "エラーログ: $(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .schedule.hours | @csv' data.json)"; exit 1; }
          MDays=$(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .schedule.mdays | @csv' data.json) || { echo 'Failed to extract days'; echo "エラーログ: $(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .schedule.mdays | @csv' data.json)"; exit 1; }
          Minutes=$(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .schedule.minutes | @csv' data.json) || { echo 'Failed to extract minutes'; echo "エラーログ: $(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .schedule.minutes | @csv' data.json)"; exit 1; }
          Months=$(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .schedule.months | @csv' data.json) || { echo 'Failed to extract months'; echo "エラーログ: $(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .schedule.months | @csv' data.json)"; exit 1; }
          timezone=$(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .schedule.timezone' data.json) || { echo 'Failed to extract timezone'; echo "エラーログ: $(jq -r '.jobs[] | select(.title == "${{ env.REPOSITORY }}") | .schedule.timezone' data.json)"; exit 1; }

          # 抽出した値を表示
          echo "ENABLED_AFTER=$Enabled" >> $GITHUB_ENV
          echo "Hours=$Hours" >> $GITHUB_ENV
          echo "MDays=$MDays" >> $GITHUB_ENV
          echo "Minutes=$Minutes" >> $GITHUB_ENV
          echo "Months=$Months" >> $GITHUB_ENV
          echo "Timezone=$timezone" >> $GITHUB_ENV

      - name: 結果の表示
        run: |
          # GitHubステップサマリーに情報を追加
          {
            echo "# 予約状況の更新結果"
            echo "| リポジトリ | 予約日時 | 予約ステータス |"
            echo "| -- | -- | -- |"
            echo "| ${{ env.REPOSITORY }} | ${{ env.Timezone }} ${{ env.Months }}月${{ env.MDays }}日${{ env.Hours }}時${{ env.Minutes }}分 | ${{ env.ENABLED_AFTER }} |"
            echo ""
            echo "予約状況を直接確認する場合は以下のサイトへアクセスしてください。"
            echo "https://cron-job.org/en/"
          } >> $GITHUB_STEP_SUMMARY
