# ===================================================
# Cronジョブ設定確認ワークフロー (check_cronjob.yml)
# ===================================================
#
# 概要:
#   このGitHub Actionsワークフローは、Cron-job.orgに登録されているCronジョブの設定状況を取得し、結果をGitHub Actionsのサマリーにレポートとして出力します。
#   システム管理者がCronジョブの有効/無効状態やスケジュールを定期的に確認・監視するために利用することができます。
#
# フロー:
#   1. ワークフローの手動トリガー (workflow_dispatch) により実行開始。
#   2. `check_cron_job_status` ジョブが Ubuntu 環境で実行される。
#   3. Cron-job.org APIへ認証トークンを用いてリクエストを送信し、登録されている全ジョブの情報をJSON形式で取得する。
#      - APIリクエスト失敗時にはエラーを出力して終了する。
#      - APIがエラーレスポンスを返した場合もエラーを出力して終了する。
#   4. 取得したJSONデータを `jq` コマンドでパースする。
#   5. 各ジョブについて以下の情報を抽出し、整形する。
#      - ジョブID (jobId)
#      - ジョブタイトル (title) - ドメイン名として利用
#      - 有効状態 (enabled) - true/false を「有効」「無効」に変換
#      - スケジュール詳細 (schedule) - タイムゾーン、月、日、時、分を結合
#        - ジョブが無効の場合は「未設定」と表示
#   6. 整形した結果をMarkdownテーブル形式でGitHub Actionsのステップサマリー ($GITHUB_STEP_SUMMARY) に追記する。
#      - 実行日時、合計ジョブ数も併せて出力する。
#   7. 処理完了メッセージを出力してジョブを終了する。
#
# 注意事項:
#   - 事前準備:
#     - Cron-job.org のアカウントでAPIキー（トークン）を発行する必要があります。
#     - 発行したAPIトークンを、このワークフローが動作するGitHubリポジトリのSecretsに `CRON_JOB_TOKEN` という名前で登録してください。
#   - エラーハンドリング:
#     - API通信エラーやAPI自体が返すエラーメッセージを検知し、ワークフローを失敗させるようにしています。
#     - ジョブが1件も登録されていない場合は警告メッセージを出力しますが、ワークフローは正常終了します。
#
# ===================================================

name: 06. Cronジョブ設定と公開状況の確認

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  check_cron_job_status:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    env:
      TZ: 'Asia/Tokyo'

    steps:
      - name: Cronジョブ情報の取得とサマリー出力
        env:
          CRON_JOB_TOKEN: ${{ secrets.CRON_JOB_TOKEN }}
          api_endpoint: "https://api.cron-job.org/jobs"
        run: |
          # スクリプトの堅牢性を高める設定
          # -e: コマンドがエラーになったら即座に終了
          # -o pipefail: パイプラインの途中でエラーが発生した場合もエラーとして扱う
          set -eo pipefail

          # =============================
          # ステップ1: Cron-job.org APIからジョブ情報を取得
          # =============================
          echo "INFO: Cron-job.org APIからジョブ情報を取得しています..."

          # curlコマンドでAPIにGETリクエストを送信し、レスポンスを変数に格納
          # -s: プログレスメーターやエラーメッセージを非表示 (エラーは後続でハンドリング)
          # || { ... }: curlコマンドが失敗した場合の処理 (ネットワークエラー等)
          cron_job_api_response=$(curl -s -X GET \
            -H "Authorization: Bearer $CRON_JOB_TOKEN" \
            $api_endpoint) || {
              # curl自体の失敗 (ネットワーク接続不可など)
              echo "::error::Cron-job.org APIへの接続に失敗しました。ネットワーク設定やエンドポイントを確認してください。"
              # 失敗時の詳細情報取得を試みる (エラーメッセージが含まれる可能性があるため)
              error_detail=$(curl -s -X GET -H "Authorization: Bearer $CRON_JOB_TOKEN" "$api_endpoint")
              echo "::error::詳細: $error_detail"

              echo "::error:: CRONジョブの取得に失敗しました。"
              echo "エラーログ: $(curl -s -X GET -H "Authorization: Bearer $CRON_JOB_TOKEN" https://api.cron-job.org/jobs)"
              exit 1
            }

          # APIレスポンスがエラーを含んでいないか確認
          # jqを使用してレスポンスJSON内の 'error' フィールドを抽出
          # 値が "null" (文字列) でない場合はAPIエラーと判断
          api_error_message=$(echo "$cron_job_api_response" | jq -r '.error')

          if [ "$api_error_message" != "null" ]; then
            # APIがエラーレスポンスを返した場合
            echo "::error::Cron-job.org APIエラーが発生しました: $api_error_message"
            echo "::error::レスポンス内容: $cron_job_api_response"
            exit 1 # エラーコード 1 でスクリプトを終了
          fi

          # 取得したジョブ数をjqでカウント
          total_job_count=$(echo "$cron_job_api_response" | jq -r '.jobs | length')
          echo "INFO: 取得したジョブ数: $total_job_count"

          # ジョブ数が0件の場合、警告メッセージを表示
          if [ "$total_job_count" -eq 0 ]; then
            echo "::warning::登録されているCronジョブがありません。"
            # 0件でも処理は継続し、サマリーにその旨を出力する
          fi

          # =============================
          # ステップ2: 結果をGitHub Actionsのサマリーに整形して出力
          # =============================
          echo "INFO: 取得結果を整形してGitHub Actionsサマリーに出力します..."

          # --- サマリーヘッダー情報の出力 ---
          {
            echo "# Cronジョブ監視結果"
            # dateコマンドで現在の日時をフォーマットして出力
            echo "実行日時: $(date '+%Y-%m-%d %H:%M:%S %Z')" # %Zでタイムゾーンも表示
            echo "合計ジョブ数: $total_job_count"
            echo "" # 空行
            # Markdownテーブルのヘッダー
            echo "| CRON ID | ドメイン (タイトル) | 有効状態 | スケジュール詳細 (月 日 時 分) |"
            echo "| --- | --- | :---: | --- |" # :---: で中央揃え
          } >> "$GITHUB_STEP_SUMMARY" # GitHub Actionsのサマリーファイルに追記

          # --- 各ジョブ情報の処理とサマリーへの出力 ---
          if [ "$total_job_count" -gt 0 ]; then
            # jq を使って各ジョブ情報を効率的かつ安全に処理
            # '.jobs[]': jobs配列の各要素を個別のJSONオブジェクトとして展開
            # -c: コンパクト出力 (各JSONオブジェクトを1行で出力)
            # while IFS= read -r job_json: 展開された各行 (ジョブJSON) を読み込む
            echo "$cron_job_api_response" | jq -c '.jobs[]' | while IFS= read -r job_json; do
              # 各ジョブの情報をjqで抽出 (-r: raw出力, JSON文字列の""を除去)

              job_id=$(echo "$job_json" | jq -r '.jobId')
              # titleが存在しない場合に備え、デフォルト値を設定
              job_title=$(echo "$job_json" | jq -r '.title // "タイトル未設定"')
              is_enabled=$(echo "$job_json" | jq -r '.enabled')
              schedule_timezone=$(echo "$job_json" | jq -r '.schedule.timezone // "TZ未設定"')

              # スケジュール情報は配列なので、jqのjoinでカンマ区切り文字列に変換
              # joinの結果が空や"-"になる可能性も考慮し、デフォルト値を設定
              schedule_minutes=$(echo "$job_json" | jq -r '.schedule.minutes | if type=="array" then join(",") else tostring end // "*"')
              schedule_hours=$(echo "$job_json" | jq -r '.schedule.hours | if type=="array" then join(",") else tostring end // "*"')
              schedule_mdays=$(echo "$job_json" | jq -r '.schedule.mdays | if type=="array" then join(",") else tostring end // "*"')
              schedule_months=$(echo "$job_json" | jq -r '.schedule.months | if type=="array" then join(",") else tostring end // "*"')

              # 有効状態に応じて表示テキストとスケジュール詳細を決定
              if [ "$is_enabled" = "true" ]; then
                job_status="✅ 有効"
                # スケジュール詳細を整形 (cron形式に近い順序で)
                schedule_details="${schedule_timezone} ${schedule_months}月 ${schedule_mdays}日 ${schedule_hours}時 ${schedule_minutes}分"
                # 各要素が '*' の場合に備えて調整 (例: "毎時" など) - より詳細な表現は要件に応じて調整
                schedule_details=$(echo "$schedule_details" | sed -e 's/\*/毎/g') # 例: '*' を '毎' に置換
              else
                job_status="❌ 無効"
                schedule_details="-" # 無効なジョブはスケジュール未設定とする
              fi

              # Markdownテーブルの行をサマリーに出力
              # パイプ文字 | はエスケープせずそのまま出力
              echo "| ${job_id} | ${job_title} | ${job_status} | ${schedule_details} |" >> "$GITHUB_STEP_SUMMARY"

            done # whileループの終了
          else
            # ジョブが0件の場合のメッセージをサマリーに追加
            echo "| - | - | - | - |" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "**登録されているジョブはありません。**" >> "$GITHUB_STEP_SUMMARY"
          fi

          # =============================
          # ステップ3: 完了メッセージ
          # =============================
          echo "INFO: 処理が正常に完了しました。結果はGitHub Actionsのサマリーで確認できます。"
