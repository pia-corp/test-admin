# ===================================================
# GitHub Submodule Update Workflow
# ===================================================
#
# 概要 (Overview)
# このワークフローは、リポジトリのサブモジュールを自動的に更新または追加するためのものです。
#
# フロー (Flow)
# 1. リポジトリのチェックアウト
# 2. Gitの設定
# 3. 既存サブモジュールの確認
# 4. 必要であれば新規サブモジュールの追加
# 5. サブモジュールの更新
# 6. 変更のコミットとプッシュ
#
# 注意事項 (Cautions)
# - GitHub Tokenが必要です
# - サブモジュール用のリポジトリが存在する必要があります
# - 指定したブランチが存在しない場合、プロセスは失敗します
# - タイムアウトは5分に設定されています
#
# ===================================================

name: Update Submodules

on:
  workflow_call:
    inputs:
      repository:
        description: "対象ブランド"
        required: true
        type: string

      repository_no_register:
        description: "任意のブランドリポジトリ"
        required: false
        type: string

      branch_name:
        description: "ブランチのパス"
        required: true
        type: string

    secrets:
      GITHUB_TOKEN_VALUE:
        description: "GitHub Token"
        required: true

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      # リポジトリ名を決定（カスタムリポジトリ名が指定されていれば使用、なければデフォルト）
      TARGET_REPOSITORY: ${{ inputs.repository_no_register != '' && inputs.repository_no_register || inputs.repository }}

    steps:
      # リポジトリのチェックアウト
      - name: リポジトリをチェックアウト(過去の履歴をすべて取得)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gitの設定を行う
        run: |
          git config --global user.name ${{ vars.GIT_USERNAME }}
          git config --global user.email ${{ vars.GIT_MAILADDRESS }}
          git config --global url."https://${{ secrets.GITHUB_TOKEN_VALUE }}@github.com/".insteadOf "https://github.com/"

      # サブモジュールの存在確認
      - name: configファイルにsubmodulesが存在するか確認
        id: check_submodule
        run: |
          # .gitmodulesファイルでサブモジュールの設定を確認
          if git config --file .gitmodules --name-only --get-regexp path | grep -q "^submodule\.${{ env.TARGET_REPOSITORY }}\.path$"; then
            echo "サブモジュールが存在します (Submodule exists)"
            echo "submodule_exists=true" >> $GITHUB_ENV
          else
            echo "::notice::サブモジュールは存在しません (Submodule does not exist)"
            echo "submodule_exists=false" >> $GITHUB_ENV
          fi

      # 新規サブモジュールの追加（存在しない場合）
      - name: クローン先を調べてリポジトリを追加
        if: env.submodule_exists == 'false'
        id: add_submodule
        run: |
          # ターゲットリポジトリのURL
          repo_url="https://github.com/pia-corp/${{ env.TARGET_REPOSITORY }}"

          # GitHub APIでリポジトリの存在を確認
          status_code=$(curl -s -o response.txt -w "%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN_VALUE }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/pia-corp/${{ env.TARGET_REPOSITORY }}")

          # ステータスコードに基づいて処理
          if [ "$status_code" -eq 200 ]; then
            echo "::notice::リポジトリが見つかりました (Repository found): $repo_url"
            echo "repository_exists=true" >> $GITHUB_ENV

            # サブモジュールの追加と初期化
            git submodule add "$repo_url" "${{ env.TARGET_REPOSITORY }}"
            git submodule update --init --remote "${{ env.TARGET_REPOSITORY }}"

          elif [ "$status_code" -eq 404 ]; then
            echo "::error::リポジトリが見つかりません (Repository not found): $repo_url"
            echo "レスポンス内容 (Response content): $(cat response.txt)"
            exit 1
          else
            echo "::error::予期せぬエラーが発生しました (Unexpected error): ステータスコード (Status code): $status_code"
            echo "レスポンス内容 (Response content): $(cat response.txt)"
            exit 1
          fi

      # 既存サブモジュールの更新
      - name: サブモジュールを更新
        if: env.submodule_exists == 'true'
        run: |
          # サブモジュールの更新
          echo "既存のサブモジュールを更新します (Updating existing submodule): ${TARGET_REPOSITORY}"
          git submodule update --init --remote "${{ env.TARGET_REPOSITORY }}"
        env:
          GITHUB_TOKEN_VALUE: ${{ secrets.GITHUB_TOKEN_VALUE }}

      # 指定ブランチへのチェックアウト
      - name: 指定したブランチをチェックアウト
        run: |
          echo "指定されたブランチにチェックアウトします (Checking out to specified branch): ${{ inputs.branch_name }}"
          git checkout ${{ inputs.branch_name }}

      # 変更のコミットとプッシュ
      - name: Commit changes HEAD（最新コミット）とステージングエリアの差分があるか確認します。
        id: commit_changes
        run: |
          # 変更をステージングエリアに追加
          git add .

          # 変更があるか確認
          if ! git diff-index --quiet HEAD; then
            # 変更があれば、コミットして変更をプッシュ
            if [ "${{ env.submodule_exists }}" == "true" ]; then
              git commit -m "自動サブモジュール更新 (Automatically update submodules)"
              echo "::notice::サブモジュールの更新を実施しました (Submodule update completed)"
            else
              git commit -m "自動サブモジュール追加 (Automatically add submodules)"
              echo "::notice::サブモジュールの追加を実施しました (Submodule addition completed)"
            fi

            # 変更をプッシュ
            git push -u origin ${{ inputs.branch_name }}
          else
            echo "サブモジュールに変更はありません (No changes in submodules)"
            echo "::notice::サブモジュールの更新情報は存在しません (No submodule updates found)"
          fi
