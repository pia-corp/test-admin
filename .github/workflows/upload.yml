# ===================================================
# ファイルアップロードワークフロー
# ===================================================
#
# 概要:
# このワークフローは、指定されたブランドのファイルを検証環境または本番環境にアップロードします。
# 外部APIからのトリガー(repository_dispatch)と手動実行(workflow_dispatch)の両方に対応しています。
#
# ユースケース:
# 1. CI/CDパイプラインの一部として、ビルド後に自動的にファイルをアップロード
# 2. 管理者がGitHub Actions UIから手動でファイルをアップロード
# 3. 外部システムからAPIを通じてデプロイをトリガー
#
# 注意事項:
# - 検証環境では常にfullアップロード(差分ではなく全ファイル)が実行されます
# - 本番環境では同期モード(full/delta)を選択できます
# - 環境ごとに異なるプロトコル(本番:SFTP、検証:FTP)を使用しています
#
# トラブルシューティング情報:
#
# 1. Permission denied エラーの場合:
#    - 認証情報（ユーザー名/パスワード）が正しいか確認
#    - サーバーでのアクセス制限（IP制限など）がないか確認
#
# 2. 特定のファイルがアップロードされない場合:
#    - local-pathとremote-pathの設定が正しいか確認
#    - ファイルのパーミッションが正しいか確認
#
# 3. タイムアウトが発生する場合:
#    - timeout-minutesの値を増やす
#    - 大量のファイルがある場合は分割アップロードを検討
#
# 環境変数の設定方法:
# - PRODUCTION_*およびDEVELOPMENT_*の変数/シークレットはリポジトリ設定のSecretsおよびVariablesから設定してください
#
# ===================================================

name: 02.ファイルアップロード

# =============================
# トリガー設定
# =============================
on:
  repository_dispatch:
    types: [upload]

  workflow_dispatch:
    inputs:
      repository:
        description: "任意のブランドリポジトリ（リストにない場合）"
        required: true
        type: string

      environment:
        description: "アップロード先環境"
        type: choice
        required: true
        options:
          - "検証環境"
          - "本番環境"

      sync_mode:
        description: "同期モード（※検証環境はfullアップロードのみ）"
        type: choice
        required: true
        options:
          - "full"
          - "delta"

# =============================
# ジョブ定義
# =============================
jobs:
  Upload:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # =============================
    # 環境変数の設定
    # - イベントタイプに応じて異なるソースから値を取得
    # - 必要に応じてデフォルト値を設定
    # =============================
    env:
      # 対象リポジトリ（ブランド）名の決定ロジック
      # 1. repository_dispatchの場合: client_payloadからの値を使用
      # 2. workflow_dispatchの場合: inputsからの値を使用
      # 3. repositoryが指定されていればそちらを優先
      # HOST の決定
      HOST: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment == '本番環境' && vars.PRODUCTION_HOST ||
        github.event_name == 'repository_dispatch' && github.event.client_payload.environment == '検証環境' && vars.DEVELOPMENT_HOST ||
        github.event_name == 'workflow_dispatch' && inputs.environment == '本番環境' && vars.PRODUCTION_HOST ||
        github.event_name == 'workflow_dispatch' && inputs.environment == '検証環境' && vars.DEVELOPMENT_HOST }}

      # PORT の決定
      PORT: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment == '本番環境'  && vars.PRODUCTION_PORT ||
        github.event_name == 'repository_dispatch' && github.event.client_payload.environment == '検証環境' && vars.DEVELOPMENT_PORT ||
        github.event_name == 'workflow_dispatch' && inputs.environment == '本番環境' && vars.PRODUCTION_PORT ||
        github.event_name == 'workflow_dispatch' && inputs.environment == '検証環境' && vars.DEVELOPMENT_PORT }}

      # USER_NAME の決定
      USER_NAME: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment == '本番環境' && vars.PRODUCTION_USER_NAME ||
        github.event_name == 'repository_dispatch' && github.event.client_payload.environment == '検証環境' && vars.DEVELOPMENT_USER_NAME ||
        github.event_name == 'workflow_dispatch' && inputs.environment == '本番環境' && vars.PRODUCTION_USER_NAME ||
        github.event_name == 'workflow_dispatch' && inputs.environment == '検証環境' && vars.DEVELOPMENT_USER_NAME }}

      # LOCAL_PATH の決定
      LOCAL_PATH: ${{ vars.LOCAL_PATH }}${{ github.event_name == 'repository_dispatch' && github.event.client_payload.repository ||
        github.event_name == 'workflow_dispatch' && inputs.repository }}

      # REMOTE_PATH の決定
      REMOTE_PATH: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.environment == '本番環境' && format('{0}/{1}', inputs.repository, vars.PRODUCTION_REMOTE_PATH) ||
        github.event_name == 'repository_dispatch' && github.event.client_payload.environment == '検証環境' && format('{0}/{1}', vars.DEVELOPMENT_REMOTE_PATH, inputs.repository) ||
        github.event_name == 'workflow_dispatch' && inputs.environment == '本番環境' && format('{0}/{1}', inputs.repository, vars.PRODUCTION_REMOTE_PATH) ||
        github.event_name == 'workflow_dispatch' && inputs.environment == '検証環境' && format('{0}/{1}', vars.DEVELOPMENT_REMOTE_PATH, inputs.repository) }}

      # SYNC_MODE の決定
      SYNC_MODE: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.sync_mode ||
        github.event_name == 'workflow_dispatch' && inputs.sync_mode }}

      TARGET_REPOSITORY: ${{ github.event_name == 'repository_dispatch' && (github.event.client_payload.repository && github.event.client_payload.repository || github.event.client_payload.repository) || github.event_name == 'workflow_dispatch' && (inputs.repository && inputs.repository || inputs.repository) }}

      # デプロイ先環境の決定ロジック（デフォルト: 検証環境）
      TARGET_ENVIRONMENT: ${{ github.event.client_payload.target && github.event.client_payload.target || inputs.target && inputs.target || '検証環境' }}


    steps:
      # =============================
      # ステップ1: リポジトリのチェックアウト
      # - アップロード対象のファイルにアクセスするために必要
      # =============================
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      # =============================
      # ステップ2A: 本番環境デプロイ（SFTP使用）
      # - セキュリティ向上のためSFTPを使用
      # - delta同期に対応（変更ファイルのみアップロード可能）
      # =============================
      - name: SFTPデプロイ（本番環境）
        if: ${{ env.TARGET_ENVIRONMENT == '本番環境' }}
        uses: milanmk/actions-file-deployer@1.15
        with:
          remote-protocol: 'sftp'
          remote-host: ${{ env.HOST }}
          remote-port: ${{ env.PORT }}
          remote-user: ${{ env.USER_NAME }}
          remote-password: ${{ secrets.PRODUCTION_PASSWORD }}
          local-path: ${{ env.LOCAL_PATH }}
          remote-path: ${{ env.REMOTE_PATH }}
          sync: ${{ env.SYNC_MODE }}
          debug: false


      # =============================
      # ステップ2A: 検証環境デプロイ（SFTP使用）
      # - セキュリティ向上のためSFTPを使用
      # - delta同期に対応（変更ファイルのみアップロード可能）
      # =============================
      - name: Use SSH private key from GitHub Secrets
        run: |
          if [ ! -d "~/.ssh" ]; then
            mkdir -p ~/.ssh  # SSHディレクトリを作成
          fi
          # GitHub Secretsから暗号化されたプライベートキーを取り出し、ファイルに保存
          echo "${{ secrets.DEVELOPMENT_SSH_KEY }}" > ~/.ssh/id_rsa.enc
          # 復号化のためのパスフレーズをGitHub Secretsから取得（もしあれば）
          echo "${{ secrets.SSH_PASSPHRASE }}" | openssl rsa -in ~/.ssh/id_rsa.enc -out ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa  # パーミッションを設定
          # configファイルがない場合に作成（必要な場合）
          echo -e "Host ${{ env.HOST }}\n  User ${{ env.USER_NAME }}\n  Port ${{ env.PORT }}\n  IdentityFile ~/.ssh/id_rsa\n" > ~/.ssh/config
          ssh -v -p ${{ env.PORT }} -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ env.USER_NAME }}@${{ env.HOST }} "mkdir -p ${{ env.REMOTE_PATH }}"

      # 2. ファイルをデプロイ
      - name: Deploy files to the remote server (検証環境)
        uses: milanmk/actions-file-deployer@1.16
        with:
          remote-protocol: 'sftp'
          remote-host: ${{ env.HOST }}
          remote-port: ${{ env.PORT }}
          remote-user: ${{ env.USER_NAME }}
          ssh-private-key: ~/.ssh/id_rsa
          local-path: ${{ env.LOCAL_PATH }}
          remote-path: ${{ env.REMOTE_PATH }}
          sync: ${{ env.SYNC_MODE }}
          debug: true
          ftp-post-sync-commands: |
            mirror --reverse --delete . ${{ env.REMOTE_PATH }}

      # =============================
      # ステップ2B: 本番環境デプロイ結果のサマリー表示
      # - デプロイ結果をわかりやすく表示
      # - GitHub Actionsの実行サマリーに表示される
      # =============================
      - name: 本番環境デプロイ結果サマリー
        if: ${{ env.TARGET_ENVIRONMENT == '本番環境' }}
        run: |
          {
            echo "# 🚀 デプロイ完了レポート"
            echo "指定したブランドのファイルを本番サーバにアップロードしました。"
            echo ""
            echo "| ブランド | アクセスURL |"
            echo "| ------ | ------------ |"
            echo "| ${{ env.TARGET_REPOSITORY }} | https://www.${{ env.TARGET_REPOSITORY }} |"
            echo ""
            echo "## 📋 詳細情報"
            echo "- **環境**: 本番環境"
            echo "- **ブランド**: ${{ env.TARGET_REPOSITORY }}"
            echo "- **同期モード**: ${{ env.SYNC_MODE }}"
            echo "- **実行日時**: $(date "+%Y-%m-%d %H:%M:%S")"
            echo "- **実行者**: ${{ github.actor }}"
          } >> $GITHUB_STEP_SUMMARY

      # =============================
      # ステップ3B: 検証環境デプロイ結果のサマリー表示
      # - デプロイ結果をわかりやすく表示
      # - GitHub Actionsの実行サマリーに表示される
      # =============================
      - name: 検証環境デプロイ結果サマリー
        if: ${{ env.TARGET_ENVIRONMENT == '検証環境' }}
        run: |
          {
            echo "# 🚀 デプロイ完了レポート"
            echo "指定したブランドのファイルを検証サーバにアップロードしました。"
            echo ""
            echo "| ブランド | アクセスURL |"
            echo "| ------ | ------------ |"
            echo "| ${{ env.TARGET_REPOSITORY }} | http://piapiapia.xsrv.jp/dev/${{ env.TARGET_REPOSITORY }}/ |"
            echo ""
            echo "## 📋 詳細情報"
            echo "- **環境**: 検証環境"
            echo "- **ブランド**: ${{ env.TARGET_REPOSITORY }}"
            echo "- **同期モード**: ${{ env.SYNC_MODE }}"
            echo "- **実行日時**: $(date "+%Y-%m-%d %H:%M:%S")"
            echo "- **実行者**: ${{ github.actor }}"
          } >> $GITHUB_STEP_SUMMARY
