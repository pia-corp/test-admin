# ===================================================
# ファイルアップロードワークフロー
# ===================================================
#
# 概要:
# このワークフローは、指定されたブランドのファイルを検証環境または本番環境にアップロードします。
# 外部APIからのトリガー(repository_dispatch)と手動実行(workflow_dispatch)の両方に対応しています。
#
# ユースケース:
# 1. CI/CDパイプラインの一部として、ビルド後に自動的にファイルをアップロード
# 2. 管理者がGitHub Actions UIから手動でファイルをアップロード
# 3. 外部システムからAPIを通じてデプロイをトリガー
#
# 注意事項:
# - 検証環境では常にfullアップロード(差分ではなく全ファイル)が実行されます
# - 本番環境では同期モード(full/delta)を選択できます
# - 環境ごとに異なるプロトコル(本番:SFTP、検証:FTP)を使用しています
#
# トラブルシューティング情報:
#
# 1. Permission denied エラーの場合:
#    - 認証情報（ユーザー名/パスワード）が正しいか確認
#    - サーバーでのアクセス制限（IP制限など）がないか確認
#
# 2. 特定のファイルがアップロードされない場合:
#    - local-pathとremote-pathの設定が正しいか確認
#    - ファイルのパーミッションが正しいか確認
#
# 3. タイムアウトが発生する場合:
#    - timeout-minutesの値を増やす
#    - 大量のファイルがある場合は分割アップロードを検討
#
# 環境変数の設定方法:
# - PRODUCTION_*およびDEVELOPMENT_*の変数/シークレットは
#   リポジトリ設定のSecretsおよびVariablesから設定してください
#
# ===================================================

name: 02.ファイルアップロード

# =============================
# トリガー設定
# =============================
on:
  # 外部APIからのトリガー（CI/CDパイプラインや他のシステムからの呼び出し用）
  repository_dispatch:
    types: [upload]

  # GitHub上での手動実行用トリガー
  workflow_dispatch:
    inputs:
      # 定義済みブランドリスト（プルダウンで選択）
      repository:
        description: "対象ブランド（リストから選択）"
        type: choice
        required: true
        options:
          - "topards.jp"
          - "feliamo.jp"
          - "molak.jp"
          - "ns-collection.jp"
          - "lilmoon.jp"
          - "minette-lens.jp"
          - "mirage-c.jp"
          - "mimuco.jp"
          - "harne.jp"
          - "louer.jp"
          - "lumieu.jp"
          - "puuuuchu.jp"
          - "melady.jp"
          - "melloew.jp"
          - "faloom.jp"
          - "mimicharme.jp"
          - "lensbe.jp"
          - "clainel.jp"
          - "chapun.jp"
          - "resay.jp"
          - "michou.jp"

      # リストにない任意のブランド（自由入力）
      custom_repository:
        description: "任意のブランドリポジトリ（リストにない場合）"
        required: false
        type: string

      # デプロイ先環境の選択
      environment:
        description: "アップロード先環境"
        type: choice
        required: true
        options:
          - "検証環境"
          - "本番環境"

      # 同期モードの選択（検証環境では常にfull）
      sync_mode:
        description: "同期モード（※検証環境はfullアップロードのみ）"
        type: choice
        required: true
        options:
          - "full"  # 全ファイルを再アップロード
          - "delta" # 変更があったファイルのみアップロード（本番環境のみ有効）

# =============================
# ジョブ定義
# =============================
jobs:
  Upload:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # タイムアウト設定（長時間のアップロードを防止）

    # =============================
    # 環境変数の設定
    # - イベントタイプに応じて異なるソースから値を取得
    # - 必要に応じてデフォルト値を設定
    # =============================
    env:
      # 対象リポジトリ（ブランド）名の決定ロジック
      # 1. repository_dispatchの場合: client_payloadからの値を使用
      # 2. workflow_dispatchの場合: inputsからの値を使用
      # 3. custom_repositoryが指定されていればそちらを優先
      TARGET_REPOSITORY: ${{ github.event_name == 'repository_dispatch' && (github.event.client_payload.custom_repository && github.event.client_payload.custom_repository || github.event.client_payload.repository) || github.event_name == 'workflow_dispatch' && (inputs.custom_repository && inputs.custom_repository || inputs.repository) }}

      # デプロイ先環境の決定ロジック（デフォルト: 検証環境）
      TARGET_ENVIRONMENT: ${{ github.event.client_payload.target && github.event.client_payload.target || inputs.target && inputs.target || '検証環境' }}

      # 同期モードの決定ロジック（デフォルト: full）
      SYNC_MODE: ${{ github.event.client_payload.sync && github.event.client_payload.sync || inputs.sync && inputs.sync || 'full' }}

    steps:
      # =============================
      # ステップ1: リポジトリのチェックアウト
      # - アップロード対象のファイルにアクセスするために必要
      # =============================
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4.2.2
        # 注: 必要に応じてfetch-depthやsubmodulesなどのオプションを追加可能

      # =============================
      # ステップ2A: 本番環境へのデプロイ（SFTP使用）
      # - セキュリティ向上のためSFTPを使用
      # - delta同期に対応（変更ファイルのみアップロード可能）
      # =============================
      - name: 本番環境へのSFTPデプロイ
        if: ${{ env.TARGET_ENVIRONMENT == '本番環境' }}
        uses: milanmk/actions-file-deployer@1.15
        with:
          remote-protocol: 'sftp'
          remote-host: ${{ vars.PRODUCTION_HOST }}
          remote-port: ${{ vars.PRODUCTION_PORT }}
          remote-user: ${{ vars.PRODUCTION_USER_NAME }}
          remote-password: ${{ secrets.PRODUCTION_PASSWORD }}
          local-path: out/${{ env.TARGET_REPOSITORY }}  # ローカルの対象ディレクトリ
          remote-path: ${{ env.TARGET_REPOSITORY }}/${{ vars.PRODUCTION_REMOTE_PATH }}/  # リモートの対象ディレクトリ
          sync: ${{ env.SYNC_MODE }}  # 同期モード（full/delta）
          debug: true  # デバッグログを有効化（トラブルシューティングのため）

      # =============================
      # ステップ2B: 本番環境デプロイ結果のサマリー表示
      # - デプロイ結果をわかりやすく表示
      # - GitHub Actionsの実行サマリーに表示される
      # =============================
      - name: 本番環境デプロイ結果サマリー
        if: ${{ env.TARGET_ENVIRONMENT == '本番環境' }}
        run: |
          {
            echo "# 🚀 デプロイ完了レポート"
            echo "指定したブランドのファイルを本番サーバにアップロードしました。"
            echo ""
            echo "| ブランド | アクセスURL |"
            echo "| ------ | ------------ |"
            echo "| ${{ env.TARGET_REPOSITORY }} | https://www.${{ env.TARGET_REPOSITORY }} |"
            echo ""
            echo "## 📋 詳細情報"
            echo "- **環境**: 本番環境"
            echo "- **ブランド**: ${{ env.TARGET_REPOSITORY }}"
            echo "- **同期モード**: ${{ env.SYNC_MODE }}"
            echo "- **実行日時**: $(date "+%Y-%m-%d %H:%M:%S")"
            echo "- **実行者**: ${{ github.actor }}"
          } >> $GITHUB_STEP_SUMMARY

      # =============================
      # ステップ3A: 検証環境へのデプロイ（FTP使用）
      # - 検証環境は常にfullアップロード（全ファイル再配置）
      # - 異なるFTPライブラリを使用（検証環境専用）
      # =============================
      # - name: 検証環境へのFTPデプロイ
      #   if: ${{ env.TARGET_ENVIRONMENT == '検証環境' }}
      #   uses: SamKirkland/FTP-Deploy-Action@v4.3.5
      #   with:
      #     server: ${{ vars.DEVELOPMENT_HOST }}
      #     username: ${{ vars.DEVELOPMENT_USER_NAME }}
      #     password: ${{ secrets.DEVELOPMENT_PASSWORD }}
      #     port: ${{ vars.DEVELOPMENT_PORT }}
      #     local-dir: out/${{ env.TARGET_REPOSITORY }}/  # ローカルの対象ディレクトリ
      #     server-dir: ${{ vars.DEVELOPMENT_REMOTE_PATH }}/${{ env.TARGET_REPOSITORY }}/  # リモートの対象ディレクトリ
      #     # 注: このアクションはdeltaモードをサポートしていないため、常にfullアップロードになる

      # =============================
      # ステップ3B: 検証環境デプロイ結果のサマリー表示
      # - デプロイ結果をわかりやすく表示
      # - GitHub Actionsの実行サマリーに表示される
      # =============================
      - name: 検証環境デプロイ結果サマリー
        if: ${{ env.TARGET_ENVIRONMENT == '検証環境' }}
        run: |
          {
            echo "# 🚀 デプロイ完了レポート"
            echo "指定したブランドのファイルを検証サーバにアップロードしました。"
            echo ""
            echo "| ブランド | アクセスURL |"
            echo "| ------ | ------------ |"
            echo "| ${{ env.TARGET_REPOSITORY }} | http://piapiapia.xsrv.jp/test/${{ env.TARGET_REPOSITORY }}/ |"
            echo ""
            echo "## 📋 詳細情報"
            echo "- **環境**: 検証環境"
            echo "- **ブランド**: ${{ env.TARGET_REPOSITORY }}"
            echo "- **同期モード**: full（検証環境は常にfull）"
            echo "- **実行日時**: $(date "+%Y-%m-%d %H:%M:%S")"
            echo "- **実行者**: ${{ github.actor }}"
          } >> $GITHUB_STEP_SUMMARY
