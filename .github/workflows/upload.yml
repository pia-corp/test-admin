# ===================================================
# ファイルアップロードワークフロー
# ===================================================
#
# 概要:
# このワークフローは、指定されたブランドのファイルを検証環境または本番環境にアップロードします。
# 外部APIからのトリガー(repository_dispatch)と手動実行(workflow_dispatch)の両方に対応しています。
#
# ユースケース:
# 1. CI/CDパイプラインの一部として、ビルド後に自動的にファイルをアップロード
# 2. 管理者がGitHub Actions UIから手動でファイルをアップロード
# 3. 外部システムからAPIを通じてデプロイをトリガー
#
# 注意事項:
# - 検証環境では常にfullアップロード(差分ではなく全ファイル)が実行されます
# - 本番環境では同期モード(full/delta)を選択できます
# - 環境ごとに異なるプロトコル(本番:SFTP、検証:FTP)を使用しています
#
# トラブルシューティング情報:
#
# 1. Permission denied エラーの場合:
#    - 認証情報（ユーザー名/パスワード）が正しいか確認
#    - サーバーでのアクセス制限（IP制限など）がないか確認
#
# 2. 特定のファイルがアップロードされない場合:
#    - local-pathとremote-pathの設定が正しいか確認
#    - ファイルのパーミッションが正しいか確認
#
# 3. タイムアウトが発生する場合:
#    - timeout-minutesの値を増やす
#    - 大量のファイルがある場合は分割アップロードを検討
#
# 環境変数の設定方法:
# - PRODUCTION_*およびDEVELOPMENT_*の変数/シークレットはリポジトリ設定のSecretsおよびVariablesから設定してください
#
# ===================================================

name: 02.ファイルアップロード

# =============================
# トリガー設定
# =============================
on:
  repository_dispatch:
    types: [upload]

  workflow_dispatch:
    inputs:
      custom_repository:
        description: "任意のブランドリポジトリ（リストにない場合）"
        required: false
        type: string

      environment:
        description: "アップロード先環境"
        type: choice
        required: true
        options:
          - "検証環境"
          - "本番環境"

      sync_mode:
        description: "同期モード（※検証環境はfullアップロードのみ）"
        type: choice
        required: true
        options:
          - "full"
          - "delta"

# =============================
# ジョブ定義
# =============================
jobs:
  Upload:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # =============================
    # 環境変数の設定
    # - イベントタイプに応じて異なるソースから値を取得
    # - 必要に応じてデフォルト値を設定
    # =============================
    env:
      # 対象リポジトリ（ブランド）名の決定ロジック
      # 1. repository_dispatchの場合: client_payloadからの値を使用
      # 2. workflow_dispatchの場合: inputsからの値を使用
      # 3. custom_repositoryが指定されていればそちらを優先
      HOST: ${{ github.event_name == 'repository_dispatch' && github.event.client_payload.host || github.event_name == 'workflow_dispatch' && github.event.client_payload.environment == '本番環境' && vars.PRODUCTION_HOST || github.event_name == 'workflow_dispatch' && github.event.client_payload.environment == '検証環境' && vars.DEVELOPMENT_HOST }}

      # TARGET_REPOSITORY: ${{ github.event_name == 'repository_dispatch' && (github.event.client_payload.custom_repository && github.event.client_payload.custom_repository || github.event.client_payload.repository) || github.event_name == 'workflow_dispatch' && (inputs.custom_repository && inputs.custom_repository || inputs.repository) }}

      # # デプロイ先環境の決定ロジック（デフォルト: 検証環境）
      # TARGET_ENVIRONMENT: ${{ github.event.client_payload.target && github.event.client_payload.target || inputs.target && inputs.target || '検証環境' }}

      # # 同期モードの決定ロジック（デフォルト: full）
      # SYNC_MODE: ${{ github.event.client_payload.sync && github.event.client_payload.sync || inputs.sync && inputs.sync || 'full' }}

    steps:
      # =============================
      # ステップ1: リポジトリのチェックアウト
      # - アップロード対象のファイルにアクセスするために必要
      # =============================
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4.2.2
        # 注: 必要に応じてfetch-depthやsubmodulesなどのオプションを追加可能

        - name: ログ
        run: |
          echo "env.HOST"

      # # =============================
      # # ステップ2A: デプロイ（SFTP使用）
      # # - セキュリティ向上のためSFTPを使用
      # # - delta同期に対応（変更ファイルのみアップロード可能）
      # # =============================
      # - name: SFTPデプロイ
      #   if: ${{ env.TARGET_ENVIRONMENT == '本番環境' }}
      #   env:
      #     HOST: ${{ vars.PRODUCTION_HOST }}
      #     PORT: ${{ vars.PRODUCTION_PORT }}
      #     USER_NAME: ${{ vars.PRODUCTION_USER_NAME }}
      #     PASSWORD: ${{ vars.PRODUCTION_PASSWORD }}
      #     SSH_PRIVATE_KEY: ${{ vars.DEPLOY_SSH_KEY }}
      #     LOCAL_PATH: ${{ vars.TARGET_REPOSITORY }}
      #     REMOTE_PATH: ${{ env.TARGET_REPOSITORY }}/${{ vars.PRODUCTION_REMOTE_PATH }}/
      #     SYNC_MODE: ${{ env.SYNC_MODE }}

      #   # github.event.client_payload.repository
      #   # github.event.client_payload.custom_repository
      #   # github.event.client_payload.target
      #   # github.event.client_payload.sync

      #   uses: milanmk/actions-file-deployer@1.15
      #   with:
      #     remote-protocol: 'sftp'
      #     remote-host: ${{ env.HOST }}
      #     remote-port: ${{ env.PORT }}
      #     remote-user: ${{ env.USER_NAME }}
      #     remote-password: ${{ env.PASSWORD }}
      #     ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}
      #     local-path: out/${{ env.LOCAL_PATH }}  # ローカルの対象ディレクトリ
      #     remote-path: ${{ env.REMOTE_PATH }}  # リモートの対象ディレクトリ
      #     sync: ${{ env.SYNC_MODE }}  # 同期モード（full/delta）
      #     debug: false  # デバッグログを有効化（トラブルシューティングのため）

      # # =============================
      # # ステップ2B: 本番環境デプロイ結果のサマリー表示
      # # - デプロイ結果をわかりやすく表示
      # # - GitHub Actionsの実行サマリーに表示される
      # # =============================
      # - name: 本番環境デプロイ結果サマリー
      #   if: ${{ env.TARGET_ENVIRONMENT == '本番環境' }}
      #   run: |
      #     {
      #       echo "# 🚀 デプロイ完了レポート"
      #       echo "指定したブランドのファイルを本番サーバにアップロードしました。"
      #       echo ""
      #       echo "| ブランド | アクセスURL |"
      #       echo "| ------ | ------------ |"
      #       echo "| ${{ env.TARGET_REPOSITORY }} | https://www.${{ env.TARGET_REPOSITORY }} |"
      #       echo ""
      #       echo "## 📋 詳細情報"
      #       echo "- **環境**: 本番環境"
      #       echo "- **ブランド**: ${{ env.TARGET_REPOSITORY }}"
      #       echo "- **同期モード**: ${{ env.SYNC_MODE }}"
      #       echo "- **実行日時**: $(date "+%Y-%m-%d %H:%M:%S")"
      #       echo "- **実行者**: ${{ github.actor }}"
      #     } >> $GITHUB_STEP_SUMMARY

      # # =============================
      # # ステップ3B: 検証環境デプロイ結果のサマリー表示
      # # - デプロイ結果をわかりやすく表示
      # # - GitHub Actionsの実行サマリーに表示される
      # # =============================
      # - name: 検証環境デプロイ結果サマリー
      #   if: ${{ env.TARGET_ENVIRONMENT == '検証環境' }}
      #   run: |
      #     {
      #       echo "# 🚀 デプロイ完了レポート"
      #       echo "指定したブランドのファイルを検証サーバにアップロードしました。"
      #       echo ""
      #       echo "| ブランド | アクセスURL |"
      #       echo "| ------ | ------------ |"
      #       echo "| ${{ env.TARGET_REPOSITORY }} | http://piapiapia.xsrv.jp/test/${{ env.TARGET_REPOSITORY }}/ |"
      #       echo ""
      #       echo "## 📋 詳細情報"
      #       echo "- **環境**: 検証環境"
      #       echo "- **ブランド**: ${{ env.TARGET_REPOSITORY }}"
      #       echo "- **同期モード**: full（検証環境は常にfull）"
      #       echo "- **実行日時**: $(date "+%Y-%m-%d %H:%M:%S")"
      #       echo "- **実行者**: ${{ github.actor }}"
      #     } >> $GITHUB_STEP_SUMMARY
